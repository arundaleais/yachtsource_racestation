Attribute VB_Name = "modMain"
Option Explicit

Public Const cbDefault = &H8000000F
Public Declare Function ShellExecute _
                            Lib "SHELL32.DLL" _
                            Alias "ShellExecuteA" ( _
                            ByVal hwnd As Long, _
                            ByVal lpOperation As String, _
                            ByVal lpFile As String, _
                            ByVal lpParameters As String, _
                            ByVal lpDirectory As String, _
                            ByVal nShowCmd As Long) _
                            As Long

'Public Declare Function Beep Lib "kernel32" (ByVal dwFreq As Long, ByVal dwDuration As Long) As Long

Public cbOrange As Long

Public Type defLink
    Type As String  'UpLink or DownLink (Replaces using UpLink & DownLink)
    Flag As Long    'The Link Flag that is associated
    Raise As Boolean    'True = Raise Linked Flag, False=Lower Linked Flag
End Type

Public Type defFlag  'Properties where to display the Image (Blank if not displayed)
    Pos As Long         'Flag(idx) = 0 if not Up (Both Row & Col > 0)
    Row As Long         'Row on which to display the flag,  Set on UP, Clear after down
    Col As Long         'Col on which to display the flag
    FixedRow As Long 'Position is preset on load, so do not clear on event
    FixedCol As Long
    Queue As Boolean    'Queue any Flag Event (Sounds, Controllers), do not clear on event
    Changed As Boolean  'Used to generate Controller Event  'Clear after event handled
End Type

Private Type defGroupDefault  'Are applied to the above when Signal Is Loaded (by LoadProfile)
    Group As String     'Group to which these defaults are applied
    FixedRow As Long
    FixedCol As Long
    Queue As Boolean
End Type

Private Type defController
    Name As String
    IpAddress As String
    On As String
    Off As String
    State As Boolean    'True = should be on
    Connection As String
    Sound As String
End Type

'Public Type defGroup    'Only defined for Fixed Groups (Sound, Lights)
'    GroupName As String
'    Queue As Boolean    'Process signals sequentially
'End Type

Private Type defSignalAttribute 'Initialled loaded from .ini file [Signal] section
'These are defined again as they are used once the timer is
'running - they are loaded from the UpDown
'These are the same for OFF and ON
    Type As String  'Class, Finish, Sound, Recall
    Name As String  'Name of the Signal  Class Flag 1
    Image As Picture    'GIF image
    Flag As defFlag   'Flag Attributes
    Group As String  'Flag is positioned below any UP Flag in this Group
    Class As Long    '-1 = none Classes(Csidx) to speed access in DoTimerEvents
    TTL As Long     'Time this flag is displayed in Millisecs
                    'It will be off for the same Period (if more than 1 cycle)
    CyclesRequired As Long  'No of On cycles by timer before creating OFF event
    OnCycles As Long    'Count of on cycles, completed after next off(when timer is enabled)
    TTD As Long         'Time Off
    ImageFilePath As String 'Flag Image
                            'timer must be unique
    Links() As defLink   'Used when signal is Raised(UP) & when Lowered(Down)
    Controller As Long  'This is the controller used when the flag is visible
                        '-1 = no linked controller
    Silent As Boolean   'Set by DoTimerEvents if Sound Signals are not generated by the link
                        'Must be unset by DoTimerEvents as well
End Type

Private Type defSignalEvt
'    Class As Long
    Signal As Long
    Raise As String         'Up, Down or ""     'Cannot be defined as Boolean
    Silent As String        'True, False or ""  'as we wanny tell if it wants leaving or changing
End Type

Private Type defButtonEvt
'    Class As Long
    Button As Long
    Enabled As String       'True, False or "" (dont change)
End Type

Private Type defEvt
    ElapsedTime As Long
    Class As Long
    Signal As Long
    Message As String
    Signals() As defSignalEvt
    Buttons() As defButtonEvt
    Focus As Long           'Idx of Command button to give focus to (0)=none
                            'Note BackColor wants cnaging to Green if it was Default
End Type

Private Type defClass       'These are extracted when the Events are loaded
    Name As String          'Same as Signal and Command Caption
    State As Long           '0=Awaiting Warning
                            '1=Warning UP (The Class Flag)
                            '1=Preparatory Up
                            '2=Preparatory Down
                            '3=Start    (Class Flag Down)
                            '4=Recall Finished
    Signal As Long          'Idx of Class Signal
    Warning As Long         'First Signal when Class Flag is raised
    Start As Long           'Time when Class cannot be postponed
                            'Time when Class can be recalled
    Offset As Long          'Offset to all class times due to Postponement
                            'or Recall
    Postpone As Boolean     'This Class is postponed
    GeneralRecall As Boolean       'This Class is General Recalled
End Type

Public IniFileName As String
Public Loading As Boolean   'Suppress Queueing Commands, and Flag Position errors

Public StaticCommands() As Boolean  'CommandButtons defined in the initially loaded form
Public Controllers() As defController
Public SignalAttributes() As defSignalAttribute
Public Evts() As defEvt
Public Classes() As defClass

Public RecallSignalIdx As Long   'The Flag index used for recalls
                                'Must be defined as a signal (normally 10)

'Public ElapsedTime As Long  'Seconds before or after start time
Public RowCount As Long
Public ColCount As Long
Public ColCountFree As Long 'ColCount less any Fixed Cols
Public StartTimeValid As Boolean
Public SignalImageFilePath As String

'These MUST be separate because Eidx is in scope when LoadRecall is called
'Dim Eidx As Long    'Evts(Eidx) index   base = 0, -1 = not open
'Sidx has separate args passed when loading
'Must set Sidx to -1 when Signal= is seen in an Event section
'And hang on to it until a new Signal= is seen
Private Sidx As Long

'These are the variables that are set up in the [Profile] section
Private RecallControl As Boolean
Private ButtonControl As Boolean
Private ButtonEvents As Boolean
Private ClassSilenceControl As Boolean
Public SoundOnAllFinishers As Boolean   'SYC Default is False
Public SkipClassOnRecall As Boolean     'SYC Default is False
Public Multiplier As Long

'Required by by Load Profile & ParseProfile
Private GroupDefaults() As defGroupDefault
Private RecallTemplate() As String
Private ClassTemplate() As String
Private EventClassName As String    'The Class the Events created relate to
Private ClassStartElapsedTime As Long

Sub Main()
'    Action.Load (Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sequences\" & "ScarboroughMultiple.csv")
    vbwInitializeProfiler ' Initialize VB Watch
vbwProfiler.vbwProcIn 75
vbwProfiler.vbwExecuteLine 1331
    SignalImageFilePath = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\SignalImages\"
vbwProfiler.vbwExecuteLine 1332
    cbOrange = RGB(255, 102, 0) '    RGB(255, 153, 0)
vbwProfiler.vbwExecuteLine 1333
    Multiplier = 1
vbwProfiler.vbwExecuteLine 1334
    RecallControl = True
vbwProfiler.vbwExecuteLine 1335
    ButtonControl = True
vbwProfiler.vbwExecuteLine 1336
    ClassSilenceControl = True
vbwProfiler.vbwExecuteLine 1337
    Load frmMain
vbwProfiler.vbwExecuteLine 1338
    Load frmDaventech
vbwProfiler.vbwExecuteLine 1339
    If frmMain.cboProfile.ListCount = 0 Then
vbwProfiler.vbwExecuteLine 1340
        Unload frmMain  'exit program
    Else
vbwProfiler.vbwExecuteLine 1341 'B
vbwProfiler.vbwExecuteLine 1342
        frmMain.Show
    End If
vbwProfiler.vbwExecuteLine 1343 'B


'    If IniFileName <> "" Then
'        Call LoadProfile(frmMain.cboProfile.List(frmMain.cboProfile.ListIndex))
'        frmMain.RaceTimer.Enabled = True
'    End If
vbwProfiler.vbwProcOut 75
vbwProfiler.vbwExecuteLine 1344
End Sub
'False if it fails

Public Function TimerOutput(OutputTime As Date) As Boolean
'Debug.Print Format$(OutputTime, "hh:mm:ss")
vbwProfiler.vbwProcIn 76
vbwProfiler.vbwExecuteLine 1345
    TimerOutput = True
vbwProfiler.vbwProcOut 76
vbwProfiler.vbwExecuteLine 1346
End Function

'Converts a Nul string to "0"
Public Function NulToZero(TxtIn As String) As String
vbwProfiler.vbwProcIn 77
vbwProfiler.vbwExecuteLine 1347
    If TxtIn = "" Then
vbwProfiler.vbwExecuteLine 1348
        NulToZero = "0"
    Else
vbwProfiler.vbwExecuteLine 1349 'B
vbwProfiler.vbwExecuteLine 1350
        NulToZero = TxtIn
    End If
vbwProfiler.vbwExecuteLine 1351 'B
vbwProfiler.vbwProcOut 77
vbwProfiler.vbwExecuteLine 1352
End Function

Public Function LoadProfile()
vbwProfiler.vbwProcIn 78
Dim DecryptedFileName As String
Dim EncryptedFileName As String
Dim Ch As Long

Dim Section As String   'Signal=nnn
Dim Idx As Long   'Signal is the only section requiring an index (at the moment)
Dim Eidx As Long    'Evts(Eidx) index   base = 0, -1 = not open
Dim Lidx As Long    'SignalAttributes(Idx).Links(Lidx).Index
Dim Cidx As Long    'Controller() index
Dim Csidx As Long   'Classes(index) index=0 if no class starting

Dim Template As String
Dim ElapsedTime As Long

Dim i As Long
Dim j As Long
Dim Secs As Long
Dim NextLine As String
Dim CleanLine As String
Dim LineType As String
Dim CleanSection As String
Dim arry() As String    'Name=Values (Multiple Values Comma separated)
Dim arry1() As String   'Values in arry(1)
Dim MySignalTimer As Timer
Dim MyFont As New StdFont
Dim MyPicture As New StdPicture
Dim MyFrame As Frame
Dim MyLink As defLink
Dim SectionError As Boolean

vbwProfiler.vbwExecuteLine 1353
Debug.Print "==============="

vbwProfiler.vbwExecuteLine 1354
    frmMain.Label1.Visible = False
vbwProfiler.vbwExecuteLine 1355
    frmMain.txtPostpone.Enabled = False
'Start a fresh Profile
vbwProfiler.vbwExecuteLine 1356
    frmMain.RaceTimer.Enabled = False
vbwProfiler.vbwExecuteLine 1357
    Loading = True
'Clear existing profile
vbwProfiler.vbwExecuteLine 1358
    Unload frmEvents
'Set up Controller(0) for the Horn, even if nothing connected
vbwProfiler.vbwExecuteLine 1359
    ReDim Controllers(0)
vbwProfiler.vbwExecuteLine 1360
    ReDim SignalAttributes(1 To 1)  'this will clear the array
vbwProfiler.vbwExecuteLine 1361
    Erase Evts
vbwProfiler.vbwExecuteLine 1362
    ReDim GroupDefaults(0)
vbwProfiler.vbwExecuteLine 1363
    ReDim RecallTemplate(0)
vbwProfiler.vbwExecuteLine 1364
    ReDim ClassTemplate(0)
vbwProfiler.vbwExecuteLine 1365
    ReDim Classes(0)    'CsIdx
'    Csidx = -1
vbwProfiler.vbwExecuteLine 1366
    Eidx = -1
vbwProfiler.vbwExecuteLine 1367
    SoundOnAllFinishers = False 'If not defined as true in .ini
vbwProfiler.vbwExecuteLine 1368
    SkipClassOnRecall = False 'If not defined as true in .ini
'    Sidx = -1
'    Bidx = -1
'Set up Controller(0) for the Horn, even if nothing connected
'Min of 1 controller
vbwProfiler.vbwExecuteLine 1369
    Call frmMain.ResetProfile
'    Call frmMain.ResetSignalTimers
'    Call frmMain.ResetCommands
'    Call frmMain.ResetFlags
'    Call frmMain.ResetFinish
'    Call frmMain.ResetRecall
vbwProfiler.vbwExecuteLine 1370
    Call frmDaventech.OpenAndSend("")
'    Call frmMain.ResetEvents no longer required
'Set up new profile
'    frmMain.Caption = App.EXEName & " [" & App.Major & "." & App.Minor & "." _
'    & App.Revision & "] " & frmMain.cboProfile.List(frmMain.cboProfile.ListIndex)

vbwProfiler.vbwExecuteLine 1371
    EncryptedFileName = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sequences\" _
    & frmMain.cboProfile.List(frmMain.cboProfile.ListIndex) & ".ini"
vbwProfiler.vbwExecuteLine 1372
    DecryptedFileName = Replace(EncryptedFileName, ".ini", ".tmp")
vbwProfiler.vbwExecuteLine 1373
    Call DecryptFile(EncryptedFileName, DecryptedFileName)
vbwProfiler.vbwExecuteLine 1374
    Ch = FreeFile
vbwProfiler.vbwExecuteLine 1375
    Open DecryptedFileName For Input As #Ch
'vbwLine 1376:    Do Until EOF(Ch)
    Do Until vbwProfiler.vbwExecuteLine(1376) Or EOF(Ch)
vbwProfiler.vbwExecuteLine 1377
        Line Input #Ch, NextLine
vbwProfiler.vbwExecuteLine 1378
        CleanLine = NextLine
vbwProfiler.vbwExecuteLine 1379
        LineType = CleanProfileLine(CleanLine)   'NextLine is cleaned
vbwProfiler.vbwExecuteLine 1380
        If LineType = "Skip" Then
vbwProfiler.vbwExecuteLine 1381
            GoTo Skip_line
        End If
vbwProfiler.vbwExecuteLine 1382 'B
vbwProfiler.vbwExecuteLine 1383
 Debug.Print CleanLine
vbwProfiler.vbwExecuteLine 1384
        arry = Split(CleanLine, "=")
'If we're reading in a template, then we do not action Open of Close
'at this time (we do it when LoadRecallEvent is processsd)
vbwProfiler.vbwExecuteLine 1385
        If Section = "Template" And arry(0) <> "/Template" Then
vbwProfiler.vbwExecuteLine 1386
                LineType = "Update"
            Else
vbwProfiler.vbwExecuteLine 1387 'B
'Stop
        End If
vbwProfiler.vbwExecuteLine 1388 'B
vbwProfiler.vbwExecuteLine 1389
        Select Case LineType
'OPEN
'vbwLine 1390:        Case Is = "Open"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1390), VBWPROFILER_EMPTY, _
        "Open")
vbwProfiler.vbwExecuteLine 1391
            Section = arry(0)
vbwProfiler.vbwExecuteLine 1392
            Select Case Section
'vbwLine 1393:            Case Is = "Profile"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1393), VBWPROFILER_EMPTY, _
        "Profile")
'vbwLine 1394:            Case Is = "Class"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1394), VBWPROFILER_EMPTY, _
        "Class")
vbwProfiler.vbwExecuteLine 1395
                Csidx = Csidx + 1
vbwProfiler.vbwExecuteLine 1396
                If Csidx > UBound(Classes) Then
vbwProfiler.vbwExecuteLine 1397
                    ReDim Preserve Classes(Csidx)
                End If
vbwProfiler.vbwExecuteLine 1398 'B
vbwProfiler.vbwExecuteLine 1399
                If SignalFromName(arry(1)) > 0 Then
vbwProfiler.vbwExecuteLine 1400
                    Classes(Csidx).Name = arry(1)
vbwProfiler.vbwExecuteLine 1401
                    Classes(Csidx).Signal = SignalFromName(arry(1))
vbwProfiler.vbwExecuteLine 1402
                    SignalAttributes(Classes(Csidx).Signal).Class = Csidx
vbwProfiler.vbwExecuteLine 1403
                    EventClassName = arry(1)
                Else
vbwProfiler.vbwExecuteLine 1404 'B
vbwProfiler.vbwExecuteLine 1405
MsgBox "Class Name in [Event=" & arry(1) & "] is not defined as Signal Name", vbCritical, "LoadProfile"
                End If
vbwProfiler.vbwExecuteLine 1406 'B
'vbwLine 1407:            Case Is = "Template"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1407), VBWPROFILER_EMPTY, _
        "Template")
vbwProfiler.vbwExecuteLine 1408
                Template = arry(1)
vbwProfiler.vbwExecuteLine 1409
                Select Case Template
'vbwLine 1410:                Case Is = "Recall"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1410), VBWPROFILER_EMPTY, _
        "Recall")
vbwProfiler.vbwExecuteLine 1411
                    RecallTemplate(0) = "'Recall Template"
'vbwLine 1412:                Case Is = "Class"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1412), VBWPROFILER_EMPTY, _
        "Class")
vbwProfiler.vbwExecuteLine 1413
                    ClassTemplate(0) = "'ClassTemplate"
                Case Else
vbwProfiler.vbwExecuteLine 1414 'B
vbwProfiler.vbwExecuteLine 1415
MsgBox "Template array " & arry(1) & " doesnt exist", vbCritical, "Parse Profile"

                End Select
vbwProfiler.vbwExecuteLine 1416 'B
'vbwLine 1417:            Case Is = "Event"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1417), VBWPROFILER_EMPTY, _
        "Event")
vbwProfiler.vbwExecuteLine 1418
                If Eidx = -1 Then
vbwProfiler.vbwExecuteLine 1419
                    Eidx = EventOpen(CLng(arry(1)) / Multiplier)
                Else
vbwProfiler.vbwExecuteLine 1420 'B
vbwProfiler.vbwExecuteLine 1421
MsgBox "Event not Closed", vbCritical, "EventOpen"
vbwProfiler.vbwExecuteLine 1422
                    GoTo Skip_line
                End If
vbwProfiler.vbwExecuteLine 1423 'B
'vbwLine 1424:            Case Is = "Controller"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1424), VBWPROFILER_EMPTY, _
        "Controller")
'Arry1 contains the Controller index
vbwProfiler.vbwExecuteLine 1425
                If IsNumeric(arry(1)) Then
vbwProfiler.vbwExecuteLine 1426
                    Cidx = arry(1)
vbwProfiler.vbwExecuteLine 1427
                    If Cidx > UBound(Controllers) Then
vbwProfiler.vbwExecuteLine 1428
                        ReDim Preserve Controllers(Cidx)
                    End If
vbwProfiler.vbwExecuteLine 1429 'B
                End If
vbwProfiler.vbwExecuteLine 1430 'B
vbwProfiler.vbwExecuteLine 1431
                Controllers(Cidx).Name = "Controller (" & Cidx & ")"
'vbwLine 1432:            Case Is = "Signal"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1432), VBWPROFILER_EMPTY, _
        "Signal")
vbwProfiler.vbwExecuteLine 1433
                Lidx = 0
vbwProfiler.vbwExecuteLine 1434
                If IsNumeric(arry(1)) Then
vbwProfiler.vbwExecuteLine 1435
                    Idx = arry(1)
'Create the Signal Attributes array index
vbwProfiler.vbwExecuteLine 1436
                    If Idx > UBound(SignalAttributes) Then
vbwProfiler.vbwExecuteLine 1437
                        i = UBound(SignalAttributes)
vbwProfiler.vbwExecuteLine 1438
                        ReDim Preserve SignalAttributes(1 To Idx)
                    Else
vbwProfiler.vbwExecuteLine 1439 'B
'Idx(1) is always created
vbwProfiler.vbwExecuteLine 1440
                        If Idx > 1 Then
'Signals must be created in ascending order
vbwProfiler.vbwExecuteLine 1441
MsgBox "Duplicated Signal(" & Idx & ") detected", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1442
                            Section = ""
vbwProfiler.vbwExecuteLine 1443
                            GoTo Skip_line   'Get next line
                        End If
vbwProfiler.vbwExecuteLine 1444 'B
                    End If
vbwProfiler.vbwExecuteLine 1445 'B
'Load a null picture so that we can test if image =0
'if no picture has been loaded
'                    Set SignalAttributes(Idx).Image = LoadPicture("")
'Default is None
vbwProfiler.vbwExecuteLine 1446
                    SignalAttributes(Idx).Controller = -1
'                    SignalAttributes(Idx).Class = -1
'Create a timer for each Signal (even if we dont use it)
vbwProfiler.vbwExecuteLine 1447
                    Load frmMain.SignalTimer(Idx)
'Create the Command(idx) if it doesn't exist
'and CommandsExists
vbwProfiler.vbwExecuteLine 1448
                    If Not CommandExists(Idx) Then
vbwProfiler.vbwExecuteLine 1449
                        Load frmMain.Commands(Idx)
vbwProfiler.vbwExecuteLine 1450
                        If UBound(StaticCommands) < Idx Then
vbwProfiler.vbwExecuteLine 1451
                            ReDim Preserve StaticCommands(Idx)
                        End If
vbwProfiler.vbwExecuteLine 1452 'B
'                               frmMain.Commands(Idx).Visible = True
'Loads it disabled (not sure why)
vbwProfiler.vbwExecuteLine 1453
                        frmMain.Commands(Idx).Enabled = True
                    End If
vbwProfiler.vbwExecuteLine 1454 'B
'Create the Image Control if it doesnt exist
                Else
vbwProfiler.vbwExecuteLine 1455 'B
vbwProfiler.vbwExecuteLine 1456
                    MsgBox "Section " & Section & " has no Index", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1457
                    Section = ""
                End If
vbwProfiler.vbwExecuteLine 1458 'B
            Case Else
vbwProfiler.vbwExecuteLine 1459 'B
vbwProfiler.vbwExecuteLine 1460
                MsgBox "Section " & Section & " not Defined", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1461
                Section = ""
            End Select
vbwProfiler.vbwExecuteLine 1462 'B
'CLOSE
'vbwLine 1463:        Case Is = "Close"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1463), VBWPROFILER_EMPTY, _
        "Close")
vbwProfiler.vbwExecuteLine 1464
            If Section = "" Then
vbwProfiler.vbwExecuteLine 1465
MsgBox "Section " & CleanSection & " not open", vbExclamation, "LoadProfile"
vbwProfiler.vbwExecuteLine 1466
                GoTo Skip_line
            End If
vbwProfiler.vbwExecuteLine 1467 'B
vbwProfiler.vbwExecuteLine 1468
            Select Case Section
'vbwLine 1469:            Case Is = "Profile"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1469), VBWPROFILER_EMPTY, _
        "Profile")
'vbwLine 1470:            Case Is = "Class"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1470), VBWPROFILER_EMPTY, _
        "Class")
vbwProfiler.vbwExecuteLine 1471
                Call LoadClassEvents(ClassStartElapsedTime / Multiplier)
'vbwLine 1472:            Case Is = "Template"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1472), VBWPROFILER_EMPTY, _
        "Template")
vbwProfiler.vbwExecuteLine 1473
                Template = ""
'vbwLine 1474:            Case Is = "Controller"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1474), VBWPROFILER_EMPTY, _
        "Controller")
'Stop
vbwProfiler.vbwExecuteLine 1475
                Cidx = 0    'End of this Controller Default
'vbwLine 1476:            Case Is = "Signal"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1476), VBWPROFILER_EMPTY, _
        "Signal")
'We have to so this at the end of the section because if CommandVisible has been changed
'we do not want to position it
vbwProfiler.vbwExecuteLine 1477
                If StaticCommands(Idx) = False Then
vbwProfiler.vbwExecuteLine 1478
                    Call frmMain.PositionCommand(Idx)
                End If
vbwProfiler.vbwExecuteLine 1479 'B
'Set command button caption to same as flag
vbwProfiler.vbwExecuteLine 1480
                frmMain.Commands(Idx).Caption = SignalAttributes(Idx).Name
vbwProfiler.vbwExecuteLine 1481
                Idx = 0       'End of this signal
'vbwLine 1482:            Case Is = "Event"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1482), VBWPROFILER_EMPTY, _
        "Event")
vbwProfiler.vbwExecuteLine 1483
                Eidx = EventClose(Eidx)
'Must close the signal index as well
vbwProfiler.vbwExecuteLine 1484
                Sidx = -1
            Case Else
vbwProfiler.vbwExecuteLine 1485 'B
            End Select
vbwProfiler.vbwExecuteLine 1486 'B
vbwProfiler.vbwExecuteLine 1487
            Section = ""
vbwProfiler.vbwExecuteLine 1488
            Idx = 0
vbwProfiler.vbwExecuteLine 1489
            CleanSection = ""
'UPDATE
'vbwLine 1490:        Case Is = "Update"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1490), VBWPROFILER_EMPTY, _
        "Update")
vbwProfiler.vbwExecuteLine 1491
            If Section = "" Then
vbwProfiler.vbwExecuteLine 1492
MsgBox "Line Outside section" & vbCrLf & NextLine & vbCrLf, vbExclamation, "LoadProfile"
vbwProfiler.vbwExecuteLine 1493
            GoTo Skip_line       'We should have a section defined
            End If
vbwProfiler.vbwExecuteLine 1494 'B
vbwProfiler.vbwExecuteLine 1495
            ReDim arry1(0)
vbwProfiler.vbwExecuteLine 1496
            If UBound(arry) > 0 Then
vbwProfiler.vbwExecuteLine 1497
                arry1 = Split(arry(1), ",")
            End If
vbwProfiler.vbwExecuteLine 1498 'B
vbwProfiler.vbwExecuteLine 1499
            Select Case Section
'vbwLine 1500:            Case Is = "Profile"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1500), VBWPROFILER_EMPTY, _
        "Profile")
vbwProfiler.vbwExecuteLine 1501
                Select Case arry(0)
'vbwLine 1502:                Case Is = "Name"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1502), VBWPROFILER_EMPTY, _
        "Name")
 'Now use the file name thas is displayed in the Combo box
 '                           frmMain.Caption = App.EXEName & " [" & App.Major & "." & App.Minor & "." _
 '                           & App.Revision & "] " & arry(1)
'vbwLine 1503:                Case Is = "Version"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1503), VBWPROFILER_EMPTY, _
        "Version")
 'This is the version of the .ini file
'vbwLine 1504:                Case Is = "GroupDefault"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1504), VBWPROFILER_EMPTY, _
        "GroupDefault")
vbwProfiler.vbwExecuteLine 1505
                    For i = 1 To UBound(GroupDefaults)
vbwProfiler.vbwExecuteLine 1506
                        If GroupDefaults(i).Group = arry1(0) Then
vbwProfiler.vbwExecuteLine 1507
                            Exit For
                        End If
vbwProfiler.vbwExecuteLine 1508 'B
vbwProfiler.vbwExecuteLine 1509
                    Next i
vbwProfiler.vbwExecuteLine 1510
                    If i > UBound(GroupDefaults) Then
vbwProfiler.vbwExecuteLine 1511
                        ReDim Preserve GroupDefaults(i)
                    End If
vbwProfiler.vbwExecuteLine 1512 'B
vbwProfiler.vbwExecuteLine 1513
                    GroupDefaults(i).Group = arry1(0)
vbwProfiler.vbwExecuteLine 1514
                    For j = 1 To UBound(arry1)
vbwProfiler.vbwExecuteLine 1515
                        Select Case arry1(j)
'vbwLine 1516:                        Case Is = "LastCol"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1516), VBWPROFILER_EMPTY, _
        "LastCol")
vbwProfiler.vbwExecuteLine 1517
                            GroupDefaults(i).FixedCol = ColCount
vbwProfiler.vbwExecuteLine 1518
                            ColCountFree = ColCount - 1
'vbwLine 1519:                        Case Is = "LastCol-1"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1519), VBWPROFILER_EMPTY, _
        "LastCol-1")
vbwProfiler.vbwExecuteLine 1520
                            GroupDefaults(i).FixedCol = ColCount - 1
vbwProfiler.vbwExecuteLine 1521
                            ColCountFree = ColCount - 2
'vbwLine 1522:                        Case Is = "Row1"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1522), VBWPROFILER_EMPTY, _
        "Row1")
vbwProfiler.vbwExecuteLine 1523
                            GroupDefaults(i).FixedRow = 1
'vbwLine 1524:                        Case Is = "Row2"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1524), VBWPROFILER_EMPTY, _
        "Row2")
vbwProfiler.vbwExecuteLine 1525
                            GroupDefaults(i).FixedRow = 2
'vbwLine 1526:                        Case Is = "Row3"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1526), VBWPROFILER_EMPTY, _
        "Row3")
vbwProfiler.vbwExecuteLine 1527
                            GroupDefaults(i).FixedRow = 3
'vbwLine 1528:                        Case Is = "Row4"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1528), VBWPROFILER_EMPTY, _
        "Row4")
vbwProfiler.vbwExecuteLine 1529
                            GroupDefaults(i).FixedRow = 4
'vbwLine 1530:                        Case Is = "Queue"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1530), VBWPROFILER_EMPTY, _
        "Queue")
vbwProfiler.vbwExecuteLine 1531
                            GroupDefaults(i).Queue = True
                        Case Else
vbwProfiler.vbwExecuteLine 1532 'B
vbwProfiler.vbwExecuteLine 1533
                            MsgBox "Invalid " & arry1(j) & " in Profile Section " & Section
                        End Select
vbwProfiler.vbwExecuteLine 1534 'B
vbwProfiler.vbwExecuteLine 1535
                    Next j
'vbwLine 1536:                Case Is = "Multiplier"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1536), VBWPROFILER_EMPTY, _
        "Multiplier")
vbwProfiler.vbwExecuteLine 1537
                    Multiplier = CLng(arry(1))
vbwProfiler.vbwExecuteLine 1538
                    If Multiplier < 1 Then
vbwProfiler.vbwExecuteLine 1539
                         Multiplier = 1
                    End If
vbwProfiler.vbwExecuteLine 1540 'B
'vbwLine 1541:                Case Is = "RecallControl"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1541), VBWPROFILER_EMPTY, _
        "RecallControl")
vbwProfiler.vbwExecuteLine 1542
                    RecallControl = AtoBool(arry(1))
'vbwLine 1543:                Case Is = "ButtonControl"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1543), VBWPROFILER_EMPTY, _
        "ButtonControl")
vbwProfiler.vbwExecuteLine 1544
                    ButtonControl = AtoBool(arry(1))
'vbwLine 1545:                Case Is = "ButtonEvents"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1545), VBWPROFILER_EMPTY, _
        "ButtonEvents")
vbwProfiler.vbwExecuteLine 1546
                    ButtonEvents = AtoBool(arry(1))
'vbwLine 1547:                Case Is = "ClassSilenceControl"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1547), VBWPROFILER_EMPTY, _
        "ClassSilenceControl")
vbwProfiler.vbwExecuteLine 1548
                    ClassSilenceControl = AtoBool(arry(1))
'vbwLine 1549:                Case Is = "SoundOnAllFinishers"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1549), VBWPROFILER_EMPTY, _
        "SoundOnAllFinishers")
vbwProfiler.vbwExecuteLine 1550
                    SoundOnAllFinishers = AtoBool(arry(1))
'vbwLine 1551:                Case Is = "SkipClassOnRecall"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1551), VBWPROFILER_EMPTY, _
        "SkipClassOnRecall")
vbwProfiler.vbwExecuteLine 1552
                    SkipClassOnRecall = AtoBool(arry(1))
                Case Else
vbwProfiler.vbwExecuteLine 1553 'B
vbwProfiler.vbwExecuteLine 1554
                    MsgBox "Invalid " & arry(0) & " in Profile Section " & Section
                End Select
vbwProfiler.vbwExecuteLine 1555 'B
'vbwLine 1556:            Case Is = "Class"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1556), VBWPROFILER_EMPTY, _
        "Class")
'Stop
vbwProfiler.vbwExecuteLine 1557
                Select Case arry(0)
'vbwLine 1558:                Case Is = "ElapsedTime"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1558), VBWPROFILER_EMPTY, _
        "ElapsedTime")
vbwProfiler.vbwExecuteLine 1559
                    ClassStartElapsedTime = arry(1)
                Case Else
vbwProfiler.vbwExecuteLine 1560 'B
vbwProfiler.vbwExecuteLine 1561
                    MsgBox "Invalid " & arry(0) & " in Class Section " & Section
                End Select
vbwProfiler.vbwExecuteLine 1562 'B
'vbwLine 1563:            Case Is = "Template"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1563), VBWPROFILER_EMPTY, _
        "Template")
vbwProfiler.vbwExecuteLine 1564
                Select Case Template
'vbwLine 1565:                Case Is = "Recall"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1565), VBWPROFILER_EMPTY, _
        "Recall")
vbwProfiler.vbwExecuteLine 1566
                    ReDim Preserve RecallTemplate(UBound(RecallTemplate) + 1)
vbwProfiler.vbwExecuteLine 1567
                    Select Case arry(0)
'vbwLine 1568:                    Case Is = "Event", "/Event"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1568), VBWPROFILER_EMPTY, _
        "Event"), "/Event"
'Re-insert the [] which have been cleaned off, so LaosRecall will
'Identify the Open & Close
vbwProfiler.vbwExecuteLine 1569
                        RecallTemplate(UBound(RecallTemplate)) = _
                        "[" & CleanLine & "]"
                    Case Else
vbwProfiler.vbwExecuteLine 1570 'B
vbwProfiler.vbwExecuteLine 1571
                        RecallTemplate(UBound(RecallTemplate)) = CleanLine
                    End Select
vbwProfiler.vbwExecuteLine 1572 'B
'vbwLine 1573:                Case Is = "Class"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1573), VBWPROFILER_EMPTY, _
        "Class")
vbwProfiler.vbwExecuteLine 1574
                    ReDim Preserve ClassTemplate(UBound(ClassTemplate) + 1)
vbwProfiler.vbwExecuteLine 1575
                    Select Case arry(0)
'vbwLine 1576:                    Case Is = "Event", "/Event"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1576), VBWPROFILER_EMPTY, _
        "Event"), "/Event"
'Re-insert the [] which have been cleaned off, so LoadRecall will
'Identify the Open & Close
vbwProfiler.vbwExecuteLine 1577
                        ClassTemplate(UBound(ClassTemplate)) = _
                        "[" & CleanLine & "]"
                    Case Else
vbwProfiler.vbwExecuteLine 1578 'B
vbwProfiler.vbwExecuteLine 1579
                        ClassTemplate(UBound(ClassTemplate)) = CleanLine
                    End Select
vbwProfiler.vbwExecuteLine 1580 'B
                End Select
vbwProfiler.vbwExecuteLine 1581 'B
'vbwLine 1582:            Case Is = "Controller"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1582), VBWPROFILER_EMPTY, _
        "Controller")
vbwProfiler.vbwExecuteLine 1583
                Select Case arry(0)
'vbwLine 1584:                Case Is = "Name"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1584), VBWPROFILER_EMPTY, _
        "Name")
vbwProfiler.vbwExecuteLine 1585
                    Controllers(Cidx).Name = arry(1)
'vbwLine 1586:                Case Is = "IpAddress"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1586), VBWPROFILER_EMPTY, _
        "IpAddress")
vbwProfiler.vbwExecuteLine 1587
                    Controllers(Cidx).IpAddress = arry(1)
'vbwLine 1588:                Case Is = "On"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1588), VBWPROFILER_EMPTY, _
        "On")
vbwProfiler.vbwExecuteLine 1589
                    Controllers(Cidx).On = arry(1)
'vbwLine 1590:                Case Is = "Off"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1590), VBWPROFILER_EMPTY, _
        "Off")
vbwProfiler.vbwExecuteLine 1591
                    Controllers(Cidx).Off = arry(1)
'vbwLine 1592:                Case Is = "Connection"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1592), VBWPROFILER_EMPTY, _
        "Connection")
vbwProfiler.vbwExecuteLine 1593
                    Controllers(Cidx).Connection = arry(1)
'vbwLine 1594:                Case Is = "Sound"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1594), VBWPROFILER_EMPTY, _
        "Sound")
vbwProfiler.vbwExecuteLine 1595
                    Controllers(Cidx).Sound = arry(1)
vbwProfiler.vbwExecuteLine 1596
                    If FileExists(Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sounds\" & arry(1)) Then
vbwProfiler.vbwExecuteLine 1597
                        SoundFilePath = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sounds\"
vbwProfiler.vbwExecuteLine 1598
                        Call OpenWav(arry(1))
                    Else
vbwProfiler.vbwExecuteLine 1599 'B
vbwProfiler.vbwExecuteLine 1600
MsgBox "Sound File " & arry1(0) & " doesnt exist"
                    End If
vbwProfiler.vbwExecuteLine 1601 'B
                Case Else
vbwProfiler.vbwExecuteLine 1602 'B
vbwProfiler.vbwExecuteLine 1603
                    MsgBox "Invalid " & arry(0) & " in Controller Section " & Section
                End Select
vbwProfiler.vbwExecuteLine 1604 'B
'vbwLine 1605:            Case Is = "Signal"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1605), VBWPROFILER_EMPTY, _
        "Signal")
'Check again we've got an index
vbwProfiler.vbwExecuteLine 1606
                If Idx = 0 Then
vbwProfiler.vbwExecuteLine 1607
MsgBox "No index " & arry(0) & " in Profile Section " & Section
vbwProfiler.vbwExecuteLine 1608
                    GoTo Skip_line
                End If
vbwProfiler.vbwExecuteLine 1609 'B
vbwProfiler.vbwExecuteLine 1610
                Select Case arry(0)
'vbwLine 1611:                Case Is = "Type"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1611), VBWPROFILER_EMPTY, _
        "Type")
vbwProfiler.vbwExecuteLine 1612
                    SignalAttributes(Idx).Type = arry(1)
'vbwLine 1613:                Case Is = "Name"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1613), VBWPROFILER_EMPTY, _
        "Name")
vbwProfiler.vbwExecuteLine 1614
                    SignalAttributes(Idx).Name = arry(1)
'vbwLine 1615:                Case Is = "TTL"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1615), VBWPROFILER_EMPTY, _
        "TTL")
vbwProfiler.vbwExecuteLine 1616
                    SignalAttributes(Idx).TTL = arry(1)
'Set TTD as same as TTL (On and Off for same time) - Is a Default
vbwProfiler.vbwExecuteLine 1617
                    SignalAttributes(Idx).TTD = arry(1)
'Set timer interval immediately before it is enabled
'                                frmMain.SignalTimer(Idx).Interval = arry(1)
'vbwLine 1618:                Case Is = "TTD"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1618), VBWPROFILER_EMPTY, _
        "TTD")
vbwProfiler.vbwExecuteLine 1619
                    SignalAttributes(Idx).TTD = arry(1)
'vbwLine 1620:                Case Is = "Cycles"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1620), VBWPROFILER_EMPTY, _
        "Cycles")
'                               Select Case SignalAttributes(Idx).Type
'Type must have been set in .ini before Cycles
'Not used now (I think)                                Case Is = "Recall", "Postpone"
'                                    SignalAttributes(Idx).CyclesRequired = arry(1) / Multiplier
'                                Case Else
vbwProfiler.vbwExecuteLine 1621
                    SignalAttributes(Idx).CyclesRequired = arry(1)
'                                End Select
'vbwLine 1622:                Case Is = "UpLink", "DownLink"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1622), VBWPROFILER_EMPTY, _
        "UpLink"), "DownLink"
vbwProfiler.vbwExecuteLine 1623
                    MyLink.Type = arry(0)
vbwProfiler.vbwExecuteLine 1624
                    MyLink.Flag = arry1(0)
vbwProfiler.vbwExecuteLine 1625
                    If UBound(arry1) > 0 Then
vbwProfiler.vbwExecuteLine 1626
                        MyLink.Raise = AtoBool(arry1(1))
'Create the Links(Next Link Index)
vbwProfiler.vbwExecuteLine 1627
                        Call CreateLink(Idx, MyLink)
                    Else
vbwProfiler.vbwExecuteLine 1628 'B
vbwProfiler.vbwExecuteLine 1629
MsgBox "Flag (" & Idx & "), " & arry(0) & " requires True or False"
                    End If
vbwProfiler.vbwExecuteLine 1630 'B
'vbwLine 1631:                Case Is = "Controller"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1631), VBWPROFILER_EMPTY, _
        "Controller")
vbwProfiler.vbwExecuteLine 1632
                    SignalAttributes(Idx).Controller = arry(1)
'Flag attributes
'vbwLine 1633:                Case Is = "Flag"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1633), VBWPROFILER_EMPTY, _
        "Flag")
'Put in Image in the Signal attributes
vbwProfiler.vbwExecuteLine 1634
                    If FileExists(SignalImageFilePath & arry1(0) & ".gif") Then
vbwProfiler.vbwExecuteLine 1635
                        Set SignalAttributes(Idx).Image = LoadPicture(SignalImageFilePath & arry1(0) & ".gif")
                    Else
vbwProfiler.vbwExecuteLine 1636 'B
vbwProfiler.vbwExecuteLine 1637
MsgBox "Flag " & arry1(0) & " doesnt exist"
                    End If
vbwProfiler.vbwExecuteLine 1638 'B
'vbwLine 1639:                Case Is = "Group"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1639), VBWPROFILER_EMPTY, _
        "Group")
vbwProfiler.vbwExecuteLine 1640
                    SignalAttributes(Idx).Group = arry(1)
vbwProfiler.vbwExecuteLine 1641
                    For i = 1 To UBound(GroupDefaults)
vbwProfiler.vbwExecuteLine 1642
                        If GroupDefaults(i).Group = arry(1) Then
vbwProfiler.vbwExecuteLine 1643
                            Exit For
                        End If
vbwProfiler.vbwExecuteLine 1644 'B
vbwProfiler.vbwExecuteLine 1645
                    Next i
vbwProfiler.vbwExecuteLine 1646
                    If i <= UBound(GroupDefaults) Then
vbwProfiler.vbwExecuteLine 1647
                        SignalAttributes(Idx).Flag.FixedCol = GroupDefaults(i).FixedCol
vbwProfiler.vbwExecuteLine 1648
                        SignalAttributes(Idx).Flag.FixedRow = GroupDefaults(i).FixedRow
vbwProfiler.vbwExecuteLine 1649
                        SignalAttributes(Idx).Flag.Queue = GroupDefaults(i).Queue
                    End If
vbwProfiler.vbwExecuteLine 1650 'B
'vbwLine 1651:                Case Is = "Row"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1651), VBWPROFILER_EMPTY, _
        "Row")
vbwProfiler.vbwExecuteLine 1652
                    SignalAttributes(Idx).Flag.FixedRow = arry(1)

'Raise on load Testing only, can only do when This Signal is closed, as we do not know the position
'vbwLine 1653:                Case Is = "Raised"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1653), VBWPROFILER_EMPTY, _
        "Raised")
 'Initially display the flag for debugging the Position
vbwProfiler.vbwExecuteLine 1654
                    If AtoBool(arry(1)) = True Then
vbwProfiler.vbwExecuteLine 1655
                        Call frmMain.RaiseRequest(Idx)
                    End If
vbwProfiler.vbwExecuteLine 1656 'B
'CommandAttributes
'vbwLine 1657:                Case Is = "CommandVisible"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1657), VBWPROFILER_EMPTY, _
        "CommandVisible")
vbwProfiler.vbwExecuteLine 1658
                    frmMain.Commands(Idx).Visible = AtoBool(arry(1))
'CommandFrame not currently used
'vbwLine 1659:                Case Is = "CommandFrame"
                Case Is = IIf(vbwProfiler.vbwExecuteLine(1659), VBWPROFILER_EMPTY, _
        "CommandFrame")
'                                    Set MyFrame = NametoFrame(arry(1))  'an Object
vbwProfiler.vbwExecuteLine 1660
                    Select Case arry(1)
'vbwLine 1661:                    Case Is = "Postponement", "Horn"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1661), VBWPROFILER_EMPTY, _
        "Postponement"), "Horn"
vbwProfiler.vbwExecuteLine 1662
                        Set frmMain.Commands(Idx).Container = MyFrame
'                                    Set frmMain.Commands(Idx).Container = frmMain.fraPostponement
'                                    Set frmMain.Commands(Idx).Container = frmMain.fraHorn
vbwProfiler.vbwExecuteLine 1663
                        frmMain.Commands(Idx).Top = 0
vbwProfiler.vbwExecuteLine 1664
                        frmMain.Commands(Idx).Left = 0
vbwProfiler.vbwExecuteLine 1665
                        frmMain.Commands(Idx).Width = 1700
'Position in middle of frame at the bottom
vbwProfiler.vbwExecuteLine 1666
                        frmMain.Commands(Idx).Move _
                        (MyFrame.Width _
                        - frmMain.Commands(Idx).Width) / 2 _
                        , MyFrame.Height _
                        - frmMain.Commands(Idx).Height - 100
vbwProfiler.vbwExecuteLine 1667
                        MyFont.Name = "Verdana"
vbwProfiler.vbwExecuteLine 1668
                        MyFont.Size = 14
vbwProfiler.vbwExecuteLine 1669
                        MyFont.Bold = True
vbwProfiler.vbwExecuteLine 1670
                        Set frmMain.Commands(Idx).Font = MyFont
                    Case Else
vbwProfiler.vbwExecuteLine 1671 'B
vbwProfiler.vbwExecuteLine 1672
MsgBox "Command Frame " & arry(1) & " Container doesnt exist"

                    End Select
vbwProfiler.vbwExecuteLine 1673 'B
'frmMain.Commands(Idx).Visible = True
'Stop
                Case Else
vbwProfiler.vbwExecuteLine 1674 'B
vbwProfiler.vbwExecuteLine 1675
MsgBox "Invalid " & arry(0) & " in Profile Section " & Section
                End Select  'of [Signal]
vbwProfiler.vbwExecuteLine 1676 'B
'vbwLine 1677:            Case Is = "Event"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1677), VBWPROFILER_EMPTY, _
        "Event")
vbwProfiler.vbwExecuteLine 1678
                Call EventUpdate(Eidx, CleanLine)
            Case Else
vbwProfiler.vbwExecuteLine 1679 'B
vbwProfiler.vbwExecuteLine 1680
MsgBox "Line Outside section" & vbCrLf & NextLine & vbCrLf, vbExclamation, "LoadProfile"
            End Select
vbwProfiler.vbwExecuteLine 1681 'B

        Case Else
vbwProfiler.vbwExecuteLine 1682 'B
vbwProfiler.vbwExecuteLine 1683
MsgBox "Invalid LineType (" & NextLine & ")", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1684
            GoTo Skip_line
        End Select
vbwProfiler.vbwExecuteLine 1685 'B

Skip_line:
'Call CleanProfileLine(NextLine)
vbwProfiler.vbwExecuteLine 1686
    Loop
vbwProfiler.vbwExecuteLine 1687
    Close #Ch
vbwProfiler.vbwExecuteLine 1688
    Kill DecryptedFileName
'    Call frmEvents.ListEvents
'Check Command Button Signals have been defined
vbwProfiler.vbwExecuteLine 1689
    Call CommandIdx("Postpone")
vbwProfiler.vbwExecuteLine 1690
    Call CommandIdx("Horn Short")
vbwProfiler.vbwExecuteLine 1691
    Call CommandIdx("Recall")
vbwProfiler.vbwExecuteLine 1692
    Call CommandIdx("General Recall")
vbwProfiler.vbwExecuteLine 1693
    Call CommandIdx("Finish")
vbwProfiler.vbwExecuteLine 1694
    RecallSignalIdx = SignalFromName("Recall Class")
vbwProfiler.vbwExecuteLine 1695
    If RecallSignalIdx = 0 Then
vbwProfiler.vbwExecuteLine 1696
MsgBox "Recall Class Signal not defined", vbCritical, "LoadProfile"
    End If
vbwProfiler.vbwExecuteLine 1697 'B
'Silence Class Flags raised at same time as a Class Flag is Lowered
vbwProfiler.vbwExecuteLine 1698
    If ClassSilenceControl Then
vbwProfiler.vbwExecuteLine 1699
         Call ClassSilence
    End If
vbwProfiler.vbwExecuteLine 1700 'B
vbwProfiler.vbwExecuteLine 1701
Call frmEvents.ListEvents
'Load Recalls for all Classes into evts
vbwProfiler.vbwExecuteLine 1702
    If RecallControl Then
vbwProfiler.vbwExecuteLine 1703
         Call ClassRecalls
    End If
vbwProfiler.vbwExecuteLine 1704 'B
vbwProfiler.vbwExecuteLine 1705
Call frmEvents.ListEvents

'Set the same as [Profile] ButtonEvents
vbwProfiler.vbwExecuteLine 1706
    frmMain.cmdEvents.Visible = ButtonEvents

'Clear the Splash display (after 3 secs)
vbwProfiler.vbwExecuteLine 1707
    frmMain.ClearFlagsTimer.Enabled = True

vbwProfiler.vbwExecuteLine 1708
    frmMain.cmdEvents.Enabled = True
vbwProfiler.vbwExecuteLine 1709
    Loading = False
vbwProfiler.vbwExecuteLine 1710
    frmMain.RaceTimer.Enabled = True
'temp stop    frmMain.RaceTimer.Enabled = True

vbwProfiler.vbwProcOut 78
vbwProfiler.vbwExecuteLine 1711
End Function
    
'Returns "Open","Close","Update","Skip"
'And cleans inbuf
Private Function CleanProfileLine(ByRef Inbuf As String) As String
vbwProfiler.vbwProcIn 79
Dim i As Long
Dim j As Long
Dim CleanLine As String
Dim CleanSection As String

'Strip Comments
vbwProfiler.vbwExecuteLine 1712
        i = InStr(1, Inbuf, "'")
vbwProfiler.vbwExecuteLine 1713
        If i > 0 Then
vbwProfiler.vbwExecuteLine 1714
            CleanLine = Left$(Inbuf, i - 1)
        Else
vbwProfiler.vbwExecuteLine 1715 'B
vbwProfiler.vbwExecuteLine 1716
            CleanLine = Inbuf
        End If
vbwProfiler.vbwExecuteLine 1717 'B
'Remove leading & trailing whitespace
vbwProfiler.vbwExecuteLine 1718
        CleanLine = Replace(CleanLine, vbTab, "")
vbwProfiler.vbwExecuteLine 1719
        CleanLine = Trim(CleanLine)
vbwProfiler.vbwExecuteLine 1720
        If CleanLine = "" Then
vbwProfiler.vbwExecuteLine 1721
             GoTo Skip_line
        End If
vbwProfiler.vbwExecuteLine 1722 'B
'Debug.Print CleanLine
vbwProfiler.vbwExecuteLine 1723
        i = InStr(1, CleanLine, "[")
vbwProfiler.vbwExecuteLine 1724
        If (i > 0) Then
'This is Open or Close Section
vbwProfiler.vbwExecuteLine 1725
            j = InStrRev(CleanLine, "]")
vbwProfiler.vbwExecuteLine 1726
            If j < i Then
vbwProfiler.vbwExecuteLine 1727
                MsgBox "Parse error:" & vbCrLf & Inbuf, vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1728
                GoTo Skip_line   'Skip this line (no closing bracket)
            End If
vbwProfiler.vbwExecuteLine 1729 'B
vbwProfiler.vbwExecuteLine 1730
            CleanSection = Mid$(CleanLine, i + 1, j - i - 1)
vbwProfiler.vbwExecuteLine 1731
            If Len(CleanSection) = 0 Then   'Blank section
vbwProfiler.vbwExecuteLine 1732
                GoTo Skip_line
            End If
vbwProfiler.vbwExecuteLine 1733 'B
'If Cleaned up Section not blank
vbwProfiler.vbwExecuteLine 1734
            Inbuf = CleanSection
vbwProfiler.vbwExecuteLine 1735
            If Mid$(CleanLine, 2, 1) <> "/" Then
'Open section (Sets up Section & SectionIndex to be used by next Input Lines
vbwProfiler.vbwExecuteLine 1736
                CleanProfileLine = "Open"
            Else
vbwProfiler.vbwExecuteLine 1737 'B
vbwProfiler.vbwExecuteLine 1738
                CleanProfileLine = "Close"
            End If
vbwProfiler.vbwExecuteLine 1739 'B
    Else
vbwProfiler.vbwExecuteLine 1740 'B
vbwProfiler.vbwExecuteLine 1741
        Inbuf = CleanLine
vbwProfiler.vbwExecuteLine 1742
        CleanProfileLine = "Update"
    End If
vbwProfiler.vbwExecuteLine 1743 'B
Finish:
vbwProfiler.vbwProcOut 79
vbwProfiler.vbwExecuteLine 1744
Exit Function

Skip_line:
vbwProfiler.vbwExecuteLine 1745
    CleanProfileLine = "Skip"
vbwProfiler.vbwExecuteLine 1746
    GoTo Finish
vbwProfiler.vbwProcOut 79
vbwProfiler.vbwExecuteLine 1747
End Function

'Returns Eidx, Check Eidx ensures it is not already open
Private Function EventOpen(ByVal ElapsedTime As Long) As Long
vbwProfiler.vbwProcIn 80
vbwProfiler.vbwExecuteLine 1748
    EventOpen = FreeEidx(ElapsedTime)
vbwProfiler.vbwProcOut 80
vbwProfiler.vbwExecuteLine 1749
End Function

'Eidx is dealt with like Ch on File Open,Read,Close
'Must be by Ref to Update Eidx in ModMain
Private Function EventClose(ByVal Eidx As Long) As Long
vbwProfiler.vbwProcIn 81
vbwProfiler.vbwExecuteLine 1750
    If Eidx = -9999 Then
vbwProfiler.vbwExecuteLine 1751
MsgBox "Event not open", vbCritical, "EventClose"
vbwProfiler.vbwProcOut 81
vbwProfiler.vbwExecuteLine 1752
        Exit Function
    End If
vbwProfiler.vbwExecuteLine 1753 'B
vbwProfiler.vbwExecuteLine 1754
    EventClose = -9999
vbwProfiler.vbwProcOut 81
vbwProfiler.vbwExecuteLine 1755
End Function

Private Function EventUpdate(ByVal Eidx As Long, ByVal Inbuf As String)
vbwProfiler.vbwProcIn 82
Dim arry() As String
Dim arry1() As String
Dim Bidx As Long    'OK here because all args passed on same line
'Split the line arry Name=Value1,Value2
vbwProfiler.vbwExecuteLine 1756
    If Eidx = -9999 Then
vbwProfiler.vbwExecuteLine 1757
MsgBox "Event not open", vbCritical, "EventUpdate"
vbwProfiler.vbwProcOut 82
vbwProfiler.vbwExecuteLine 1758
        Exit Function
    End If
vbwProfiler.vbwExecuteLine 1759 'B
vbwProfiler.vbwExecuteLine 1760
    If CleanProfileLine(Inbuf) <> "Update" Then
'Cleans Inbuf
vbwProfiler.vbwExecuteLine 1761
Stop
vbwProfiler.vbwProcOut 82
vbwProfiler.vbwExecuteLine 1762
        Exit Function
    End If
vbwProfiler.vbwExecuteLine 1763 'B
vbwProfiler.vbwExecuteLine 1764
    arry = Split(Inbuf, "=")
vbwProfiler.vbwExecuteLine 1765
    ReDim arry1(0)
vbwProfiler.vbwExecuteLine 1766
    If UBound(arry) > 0 Then
vbwProfiler.vbwExecuteLine 1767
        arry1 = Split(arry(1), ",")
    End If
vbwProfiler.vbwExecuteLine 1768 'B
vbwProfiler.vbwExecuteLine 1769
        Select Case arry(0)
'vbwLine 1770:        Case Is = "Signal"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1770), VBWPROFILER_EMPTY, _
        "Signal")
'get a new index
'If arry(1) = "Class 3" Then Stop
vbwProfiler.vbwExecuteLine 1771
            Sidx = FreeSidx(Eidx, SignalFromName(arry(1)))
vbwProfiler.vbwExecuteLine 1772
            Call PutSignalEvent(Eidx, Sidx)
'vbwLine 1773:        Case Is = "Button"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1773), VBWPROFILER_EMPTY, _
        "Button")
vbwProfiler.vbwExecuteLine 1774
            Bidx = FreeBidx(Eidx, SignalFromName(arry1(0)))
vbwProfiler.vbwExecuteLine 1775
            Call PutButtonEvent(Eidx, Bidx, arry1(1))   'Enabled
'vbwLine 1776:        Case Is = "Message"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1776), VBWPROFILER_EMPTY, _
        "Message")
'Make the event message the first one for this time.
'This Should be the class start
vbwProfiler.vbwExecuteLine 1777
            If Evts(Eidx).Message = "" Then
vbwProfiler.vbwExecuteLine 1778
                Call PutEvent(Eidx, arry(1))
            End If
vbwProfiler.vbwExecuteLine 1779 'B
'vbwLine 1780:        Case Is = "Focus"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1780), VBWPROFILER_EMPTY, _
        "Focus")
vbwProfiler.vbwExecuteLine 1781
            Call PutEvent(Eidx, , arry1(0))
'vbwLine 1782:        Case Is = "Raised"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1782), VBWPROFILER_EMPTY, _
        "Raised")
'Needs Sidx passing, must have been defined with [Signal=]
vbwProfiler.vbwExecuteLine 1783
            Call PutSignalEvent(Eidx, Sidx, arry(1))
'vbwLine 1784:        Case Is = "Silent"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1784), VBWPROFILER_EMPTY, _
        "Silent")
'Needs Sidx passing
vbwProfiler.vbwExecuteLine 1785
            Call PutSignalEvent(Eidx, Sidx, , arry(1))
'vbwLine 1786:        Case Is = "Recalls"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1786), VBWPROFILER_EMPTY, _
        "Recalls")
vbwProfiler.vbwExecuteLine 1787
            Bidx = FreeBidx(Eidx, frmMain.CommandFromCaption("Recall"))
vbwProfiler.vbwExecuteLine 1788
            Call PutButtonEvent(Eidx, Bidx, arry(1))   'Enabled
vbwProfiler.vbwExecuteLine 1789
            Bidx = FreeBidx(Eidx, frmMain.CommandFromCaption("General Recall"))
vbwProfiler.vbwExecuteLine 1790
            Call PutButtonEvent(Eidx, Bidx, arry(1))   'Enabled
'Must do after Button has been enables - to set the Focus
vbwProfiler.vbwExecuteLine 1791
            If AtoBool(arry(1)) = True Then
vbwProfiler.vbwExecuteLine 1792
                Call PutEvent(Eidx, "Enable Recalls", "Recall")
            Else
vbwProfiler.vbwExecuteLine 1793 'B
vbwProfiler.vbwExecuteLine 1794
                Call PutEvent(Eidx, "Disable Recalls")
            End If
vbwProfiler.vbwExecuteLine 1795 'B
        Case Else
vbwProfiler.vbwExecuteLine 1796 'B
vbwProfiler.vbwExecuteLine 1797
 MsgBox "Invalid Event-" & arry(0), vbCritical, "EventUpdate"
        End Select  'of [Signal]
vbwProfiler.vbwExecuteLine 1798 'B

vbwProfiler.vbwProcOut 82
vbwProfiler.vbwExecuteLine 1799
End Function

Private Function LoadRecallEvents(ByVal ElapsedTime As Long)
vbwProfiler.vbwProcIn 83
Dim i As Long
Dim NextLine As String
Dim arry() As String
Dim EventOffset As Long
Dim LineType As String
Dim RecallEidx As Long    'Only for the recall
Dim kb As String

vbwProfiler.vbwExecuteLine 1800
    RecallEidx = -9999
vbwProfiler.vbwExecuteLine 1801
    For i = 0 To UBound(RecallTemplate)
vbwProfiler.vbwExecuteLine 1802
        NextLine = RecallTemplate(i)
vbwProfiler.vbwExecuteLine 1803
        If NextLine = "" Then
vbwProfiler.vbwExecuteLine 1804
             GoTo Skip_line
        End If
vbwProfiler.vbwExecuteLine 1805 'B
vbwProfiler.vbwExecuteLine 1806
        arry = Split(NextLine, "=")
vbwProfiler.vbwExecuteLine 1807
        Select Case arry(0)
'vbwLine 1808:        Case Is = "EventOffset"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1808), VBWPROFILER_EMPTY, _
        "EventOffset")
vbwProfiler.vbwExecuteLine 1809
            EventOffset = arry(1) / Multiplier
        Case Else
vbwProfiler.vbwExecuteLine 1810 'B
vbwProfiler.vbwExecuteLine 1811
            LineType = CleanProfileLine(NextLine)   'NextLine is cleaned
'Helpds debugging
vbwProfiler.vbwExecuteLine 1812
            NextLine = Replace(NextLine, "<ElapsedTime>", ElapsedTime)
vbwProfiler.vbwExecuteLine 1813
            NextLine = Replace(NextLine, "<EventOffset>", EventOffset)
vbwProfiler.vbwExecuteLine 1814
            NextLine = Replace(NextLine, "<ClassName>", EventClassName)
vbwProfiler.vbwExecuteLine 1815
Debug.Print "R>" & NextLine
'If Left$(NextLine, 6) = "Signal" Then Stop
vbwProfiler.vbwExecuteLine 1816
            Select Case LineType
'vbwLine 1817:            Case Is = "Open"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1817), VBWPROFILER_EMPTY, _
        "Open")
vbwProfiler.vbwExecuteLine 1818
               If RecallEidx <> -9999 Then
vbwProfiler.vbwExecuteLine 1819
MsgBox "Event not Closed", vbCritical, "EventOpen"
vbwProfiler.vbwProcOut 83
vbwProfiler.vbwExecuteLine 1820
                    Exit Function
                Else
vbwProfiler.vbwExecuteLine 1821 'B
vbwProfiler.vbwExecuteLine 1822
                    RecallEidx = EventOpen(ElapsedTime + EventOffset)
                End If
vbwProfiler.vbwExecuteLine 1823 'B
'vbwLine 1824:            Case Is = "Close"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1824), VBWPROFILER_EMPTY, _
        "Close")
vbwProfiler.vbwExecuteLine 1825
                RecallEidx = EventClose(RecallEidx)
'vbwLine 1826:            Case Is = "Update"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1826), VBWPROFILER_EMPTY, _
        "Update")
'If ElapsedTime + ElapsedOffset = 240 Then Stop
vbwProfiler.vbwExecuteLine 1827
                Call EventUpdate(RecallEidx, NextLine)
'frmEvents.ListEvents
'frmEvents.WindowState = vbNormal  'Scale will be 0 in VBE (window is minimized)
'frmEvents.Refresh
'frmEvents.Visible = True
'kb = frmEvents.ScaleHeight
'Stop
'vbwLine 1828:            Case Is = "Skip"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1828), VBWPROFILER_EMPTY, _
        "Skip")
            Case Else
vbwProfiler.vbwExecuteLine 1829 'B
vbwProfiler.vbwExecuteLine 1830
MsgBox "Invalid LineType (" & NextLine & ")", vbCritical, "LoadRecallEvents"
            End Select
vbwProfiler.vbwExecuteLine 1831 'B
'            Call ParseProfile(NextLine)
        End Select
vbwProfiler.vbwExecuteLine 1832 'B
Skip_line:
vbwProfiler.vbwExecuteLine 1833
    Next i

'frmEvents.ListEvents
vbwProfiler.vbwProcOut 83
vbwProfiler.vbwExecuteLine 1834
End Function

Private Function LoadClassEvents(ByVal ElapsedTime As Long)
vbwProfiler.vbwProcIn 84
Dim i As Long
Dim NextLine As String
Dim arry() As String
Dim EventOffset As Long
Dim LineType As String
Dim EidxTime As Long    'Only for the Class
Dim kb As String

vbwProfiler.vbwExecuteLine 1835
    EidxTime = -9999   'Assume no event set up (must not be a valid elapsed time)
                        'Because the OpenEidx returns the Elapsed time
vbwProfiler.vbwExecuteLine 1836
    For i = 0 To UBound(ClassTemplate)
vbwProfiler.vbwExecuteLine 1837
        NextLine = ClassTemplate(i)
vbwProfiler.vbwExecuteLine 1838
        arry = Split(NextLine, "=")
vbwProfiler.vbwExecuteLine 1839
        Select Case arry(0)
'vbwLine 1840:        Case Is = "EventOffset"
        Case Is = IIf(vbwProfiler.vbwExecuteLine(1840), VBWPROFILER_EMPTY, _
        "EventOffset")
vbwProfiler.vbwExecuteLine 1841
            EventOffset = arry(1) / Multiplier
        Case Else
vbwProfiler.vbwExecuteLine 1842 'B
vbwProfiler.vbwExecuteLine 1843
            LineType = CleanProfileLine(NextLine)   'NextLine is cleaned
'Helpds debugging
vbwProfiler.vbwExecuteLine 1844
            NextLine = Replace(NextLine, "<ElapsedTime>", ElapsedTime)
vbwProfiler.vbwExecuteLine 1845
            NextLine = Replace(NextLine, "<EventOffset>", EventOffset)
vbwProfiler.vbwExecuteLine 1846
            NextLine = Replace(NextLine, "<ClassName>", EventClassName)
vbwProfiler.vbwExecuteLine 1847
Debug.Print "R>" & NextLine
'If Left$(NextLine, 6) = "Signal" Then Stop
vbwProfiler.vbwExecuteLine 1848
            Select Case LineType
'vbwLine 1849:            Case Is = "Open"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1849), VBWPROFILER_EMPTY, _
        "Open")
vbwProfiler.vbwExecuteLine 1850
               If EidxTime <> -9999 Then
vbwProfiler.vbwExecuteLine 1851
MsgBox "Event not Closed", vbCritical, "EventOpen"
vbwProfiler.vbwProcOut 84
vbwProfiler.vbwExecuteLine 1852
                    Exit Function
                Else
vbwProfiler.vbwExecuteLine 1853 'B
vbwProfiler.vbwExecuteLine 1854
                    EidxTime = EventOpen((ElapsedTime + EventOffset))
                End If
vbwProfiler.vbwExecuteLine 1855 'B
'vbwLine 1856:            Case Is = "Close"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1856), VBWPROFILER_EMPTY, _
        "Close")
vbwProfiler.vbwExecuteLine 1857
                EidxTime = EventClose(EidxTime)
'vbwLine 1858:            Case Is = "Update"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1858), VBWPROFILER_EMPTY, _
        "Update")
'If ElapsedTime + ElapsedOffset = 240 Then Stop
vbwProfiler.vbwExecuteLine 1859
                Call EventUpdate(EidxTime, NextLine)
'vbwLine 1860:            Case Is = "Skip"
            Case Is = IIf(vbwProfiler.vbwExecuteLine(1860), VBWPROFILER_EMPTY, _
        "Skip")
            Case Else
vbwProfiler.vbwExecuteLine 1861 'B
vbwProfiler.vbwExecuteLine 1862
MsgBox "Invalid LineType (" & NextLine & ")", vbCritical, "LoadClassEvents"
            End Select
vbwProfiler.vbwExecuteLine 1863 'B
'            Call ParseProfile(NextLine)
        End Select
vbwProfiler.vbwExecuteLine 1864 'B
vbwProfiler.vbwExecuteLine 1865
    Next i
'frmEvents.ListEvents
vbwProfiler.vbwProcOut 84
vbwProfiler.vbwExecuteLine 1866
End Function

'Called when LoadProfile is finished
Private Function LoadStartEvents()
vbwProfiler.vbwProcIn 85
Dim Eidx As Long

'    Call frmMain.DefaultsFirstEvent
vbwProfiler.vbwExecuteLine 1867
    Eidx = EventOpen(Evts(0).ElapsedTime)
vbwProfiler.vbwExecuteLine 1868
    Evts(Eidx).Message = "Start Sequence"
vbwProfiler.vbwExecuteLine 1869
    Call EventClose(Eidx)

vbwProfiler.vbwProcOut 85
vbwProfiler.vbwExecuteLine 1870
End Function

Private Function LoadFinishEvents()
vbwProfiler.vbwProcIn 86
Dim Eidx As Long

'    EventClassName = "Finish"
'    Eidx = UBound(Evts)

vbwProfiler.vbwExecuteLine 1871
    Eidx = EventOpen(Evts(UBound(Evts)).ElapsedTime + 1)
'This is the very latest you can postpone
'you can change a general recall to postpone

'    Call EventUpdate(Eidx, "Signal=Postpone")
'    Call EventUpdate(Eidx, "Raised=False")
vbwProfiler.vbwExecuteLine 1872
    Call EventUpdate(Eidx, "Button=Postpone,False")

vbwProfiler.vbwExecuteLine 1873
    Evts(Eidx).Message = "Finish Enabled"
vbwProfiler.vbwExecuteLine 1874
    Call EventUpdate(Eidx, "Button=Horn Short,True")
'Dont think this should be required
'    Call EventUpdate(Eidx, "Signal=White Fl")
'    Call EventUpdate(Eidx, "Raised=False")
vbwProfiler.vbwExecuteLine 1875
    Call EventUpdate(Eidx, "Focus=Finish")
vbwProfiler.vbwExecuteLine 1876
    Call EventClose(Eidx)
vbwProfiler.vbwProcOut 86
vbwProfiler.vbwExecuteLine 1877
End Function

Private Function CommandExists(Idx As Long) As Boolean
vbwProfiler.vbwProcIn 87
Dim MyCommand As CommandButton
vbwProfiler.vbwExecuteLine 1878
    For Each MyCommand In frmMain.Commands
vbwProfiler.vbwExecuteLine 1879
        If MyCommand.Index = Idx Then
vbwProfiler.vbwExecuteLine 1880
            CommandExists = True
vbwProfiler.vbwProcOut 87
vbwProfiler.vbwExecuteLine 1881
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 1882 'B
vbwProfiler.vbwExecuteLine 1883
    Next MyCommand
vbwProfiler.vbwProcOut 87
vbwProfiler.vbwExecuteLine 1884
End Function

Public Function AtoBool(kb As String) As Boolean
vbwProfiler.vbwProcIn 88
vbwProfiler.vbwExecuteLine 1885
    If kb = "True" Then
vbwProfiler.vbwExecuteLine 1886
         AtoBool = True
    End If
vbwProfiler.vbwExecuteLine 1887 'B
vbwProfiler.vbwProcOut 88
vbwProfiler.vbwExecuteLine 1888
End Function

Public Function CommandIdx(CommandName As String) As Long
vbwProfiler.vbwProcIn 89
Dim kb As String
Dim MyCommand As CommandButton

vbwProfiler.vbwExecuteLine 1889
    For Each MyCommand In frmMain.Commands
vbwProfiler.vbwExecuteLine 1890
        If MyCommand.Caption = CommandName Then
vbwProfiler.vbwExecuteLine 1891
            CommandIdx = MyCommand.Index
vbwProfiler.vbwProcOut 89
vbwProfiler.vbwExecuteLine 1892
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 1893 'B
vbwProfiler.vbwExecuteLine 1894
    Next MyCommand
vbwProfiler.vbwExecuteLine 1895
MsgBox "Command Button " & CommandName & " not found", vbExclamation, "CommandIdx"
vbwProfiler.vbwProcOut 89
vbwProfiler.vbwExecuteLine 1896
End Function

Public Function NameFromFullPath(FullPath As String, Optional Delimiter As String, Optional RemoveRollover As Boolean) As String
'Input: Name/Full Path of a file
'Returns: Name of file
vbwProfiler.vbwProcIn 90

    Dim sPath As String
    Dim sList() As String
    Dim sAns As String
    Dim iArrayLen As Integer
    Dim i As Integer
    Dim j As Integer
    Dim kb As String

'MsgBox FullPath
vbwProfiler.vbwExecuteLine 1897
    If Delimiter = "" Then
vbwProfiler.vbwExecuteLine 1898
         Delimiter = "\"
    End If
vbwProfiler.vbwExecuteLine 1899 'B
vbwProfiler.vbwExecuteLine 1900
    If Len(FullPath) = 0 Then
vbwProfiler.vbwProcOut 90
vbwProfiler.vbwExecuteLine 1901
         Exit Function
    End If
vbwProfiler.vbwExecuteLine 1902 'B
vbwProfiler.vbwExecuteLine 1903
    sList = Split(FullPath, Delimiter)
vbwProfiler.vbwExecuteLine 1904
    iArrayLen = UBound(sList)
vbwProfiler.vbwExecuteLine 1905
    sAns = IIf(iArrayLen = 0, "", sList(iArrayLen))
'only filename
'MsgBox FullPath
vbwProfiler.vbwExecuteLine 1906
    If sAns = "" And iArrayLen = 0 Then
vbwProfiler.vbwExecuteLine 1907
         sAns = FullPath
    End If
vbwProfiler.vbwExecuteLine 1908 'B
vbwProfiler.vbwExecuteLine 1909
    If RemoveRollover And sAns <> "" Then
vbwProfiler.vbwExecuteLine 1910
        j = InStr(sAns, ".") 'get the first dot
vbwProfiler.vbwExecuteLine 1911
        If j = 0 Then 'no dot so all the string
vbwProfiler.vbwExecuteLine 1912
             j = Len(sAns)
        End If
vbwProfiler.vbwExecuteLine 1913 'B
vbwProfiler.vbwExecuteLine 1914
        i = InStrRev(Left$(sAns, j), "_")
vbwProfiler.vbwExecuteLine 1915
        If j = i + 9 Then 'msu be _yyyymmdd.
vbwProfiler.vbwExecuteLine 1916
            If IsNumeric(Mid$(sAns, i + 1, 8)) Then
vbwProfiler.vbwExecuteLine 1917
                sAns = Replace(sAns, Mid$(sAns, i, 9), "")
            End If
vbwProfiler.vbwExecuteLine 1918 'B
        End If
vbwProfiler.vbwExecuteLine 1919 'B
    End If
vbwProfiler.vbwExecuteLine 1920 'B

vbwProfiler.vbwExecuteLine 1921
    NameFromFullPath = sAns

vbwProfiler.vbwProcOut 90
vbwProfiler.vbwExecuteLine 1922
End Function


' Return True if a file exists
Public Function FileExists(FileName As String) As Boolean
vbwProfiler.vbwProcIn 91
vbwProfiler.vbwExecuteLine 1923
    FileExists = False
'MsgBox FileName & ":" & GetAttr(FileName)
vbwProfiler.vbwExecuteLine 1924
    On Error GoTo ErrorHandler
vbwProfiler.vbwExecuteLine 1925
    If NameFromFullPath(FileName) <> "" Then  'directory
'does file exists
vbwProfiler.vbwExecuteLine 1926
        If (GetAttr(FileName) And vbNormal) = vbNormal Then
vbwProfiler.vbwExecuteLine 1927
             FileExists = True
        End If
vbwProfiler.vbwExecuteLine 1928 'B
    End If
vbwProfiler.vbwExecuteLine 1929 'B
ErrorHandler:
    ' if an error occurs, this function returns False
'MsgBox FileName & vbCrLf & FileExists
vbwProfiler.vbwProcOut 91
vbwProfiler.vbwExecuteLine 1930
End Function

Public Function CreateLink(ByRef Idx As Long, Link As defLink)
vbwProfiler.vbwProcIn 92
vbwProfiler.vbwExecuteLine 1931
    With SignalAttributes(Idx)
vbwProfiler.vbwExecuteLine 1932
        If IsLinksInitialised(.Links) = False Then
vbwProfiler.vbwExecuteLine 1933
            ReDim .Links(0)
        Else
vbwProfiler.vbwExecuteLine 1934 'B
vbwProfiler.vbwExecuteLine 1935
            ReDim Preserve .Links(UBound(.Links) + 1)
        End If
vbwProfiler.vbwExecuteLine 1936 'B
vbwProfiler.vbwExecuteLine 1937
        .Links(UBound(.Links)) = Link
vbwProfiler.vbwExecuteLine 1938
    End With
vbwProfiler.vbwProcOut 92
vbwProfiler.vbwExecuteLine 1939
End Function

Public Function IsLinksInitialised(ByRef arr() As defLink) As Boolean
vbwProfiler.vbwProcIn 93
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1940
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1941
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1942
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1943
         IsLinksInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1944 'B
vbwProfiler.vbwProcOut 93
vbwProfiler.vbwExecuteLine 1945
Exit Function
errHandler:
vbwProfiler.vbwProcOut 93
vbwProfiler.vbwExecuteLine 1946
End Function

Public Function IsEvtsInitialised(ByRef arr() As defEvt) As Boolean
vbwProfiler.vbwProcIn 94
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1947
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1948
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1949
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1950
         IsEvtsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1951 'B
vbwProfiler.vbwProcOut 94
vbwProfiler.vbwExecuteLine 1952
Exit Function
errHandler:
vbwProfiler.vbwProcOut 94
vbwProfiler.vbwExecuteLine 1953
End Function

Public Function IsSignalsInitialised(ByRef arr() As defSignalEvt) As Boolean
vbwProfiler.vbwProcIn 95
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1954
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1955
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1956
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1957
         IsSignalsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1958 'B
vbwProfiler.vbwProcOut 95
vbwProfiler.vbwExecuteLine 1959
Exit Function
errHandler:
vbwProfiler.vbwProcOut 95
vbwProfiler.vbwExecuteLine 1960
End Function

Public Function IsButtonsInitialised(ByRef arr() As defButtonEvt) As Boolean
vbwProfiler.vbwProcIn 96
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1961
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1962
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1963
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1964
         IsButtonsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1965 'B
vbwProfiler.vbwProcOut 96
vbwProfiler.vbwExecuteLine 1966
Exit Function
errHandler:
vbwProfiler.vbwProcOut 96
vbwProfiler.vbwExecuteLine 1967
End Function

'Returns the index from the Signal name,
'Only used by LoadProfile so that the .ini file can refer to it by name which makes
'Setting up the initialisation file easier.
'Return 0 if not found
Public Function SignalFromName(ByVal Name As String) As Long
vbwProfiler.vbwProcIn 97
Dim Idx As Long

vbwProfiler.vbwExecuteLine 1968
    For Idx = 1 To UBound(SignalAttributes)
vbwProfiler.vbwExecuteLine 1969
        With SignalAttributes(Idx)
vbwProfiler.vbwExecuteLine 1970
            If .Name = Name Then
vbwProfiler.vbwExecuteLine 1971
                SignalFromName = Idx
vbwProfiler.vbwExecuteLine 1972
                Exit For
            End If
vbwProfiler.vbwExecuteLine 1973 'B
vbwProfiler.vbwExecuteLine 1974
        End With
vbwProfiler.vbwExecuteLine 1975
    Next Idx
vbwProfiler.vbwProcOut 97
vbwProfiler.vbwExecuteLine 1976
End Function

'Return Eidx of first event at this time -1 = not found
Public Function EventToEidx(ByVal ElapsedTime, ByVal Idx As Long) As Long
vbwProfiler.vbwProcIn 98
Dim Eidx As Long

vbwProfiler.vbwExecuteLine 1977
    EventToEidx = -1
vbwProfiler.vbwExecuteLine 1978
    If IsEvtsInitialised(Evts) Then
vbwProfiler.vbwExecuteLine 1979
        For Eidx = 0 To UBound(Evts)
vbwProfiler.vbwExecuteLine 1980
            If Evts(Eidx).ElapsedTime = ElapsedTime And Evts(Eidx).Signal = Idx Then
vbwProfiler.vbwExecuteLine 1981
                EventToEidx = Eidx
vbwProfiler.vbwProcOut 98
vbwProfiler.vbwExecuteLine 1982
                Exit Function
            End If
vbwProfiler.vbwExecuteLine 1983 'B
vbwProfiler.vbwExecuteLine 1984
        Next Eidx
    End If
vbwProfiler.vbwExecuteLine 1985 'B
vbwProfiler.vbwProcOut 98
vbwProfiler.vbwExecuteLine 1986
End Function

Public Function PutEvent(ByVal Eidx As Long, Optional Message As String, Optional FocusName As String)
vbwProfiler.vbwProcIn 99
vbwProfiler.vbwExecuteLine 1987
    If Message <> "" Then
vbwProfiler.vbwExecuteLine 1988
        Evts(Eidx).Message = Evts(Eidx).Message & Message
    End If
vbwProfiler.vbwExecuteLine 1989 'B
vbwProfiler.vbwExecuteLine 1990
    If FocusName <> "" Then
vbwProfiler.vbwExecuteLine 1991
        Evts(Eidx).Focus = frmMain.CommandFromCaption(FocusName)
    End If
vbwProfiler.vbwExecuteLine 1992 'B

vbwProfiler.vbwProcOut 99
vbwProfiler.vbwExecuteLine 1993
End Function

Public Function PutButtonEvent(ByVal Eidx As Long, ByVal Bidx As Long, Optional Enabled As String)
vbwProfiler.vbwProcIn 100

vbwProfiler.vbwExecuteLine 1994
    If Enabled <> "" Then
vbwProfiler.vbwExecuteLine 1995
        Evts(Eidx).Buttons(Bidx).Enabled = Enabled
    End If
vbwProfiler.vbwExecuteLine 1996 'B
vbwProfiler.vbwProcOut 100
vbwProfiler.vbwExecuteLine 1997
End Function

'Signal must have been defined
Public Function PutSignalEvent(ByVal Eidx As Long, ByVal Sidx As Long, Optional Raise As String, Optional Silent As String)
vbwProfiler.vbwProcIn 101
vbwProfiler.vbwExecuteLine 1998
    If Raise <> "" Then
vbwProfiler.vbwExecuteLine 1999
        Evts(Eidx).Signals(Sidx).Raise = Raise
    End If
vbwProfiler.vbwExecuteLine 2000 'B
vbwProfiler.vbwExecuteLine 2001
    If Silent <> "" Then
vbwProfiler.vbwExecuteLine 2002
        Evts(Eidx).Signals(Sidx).Silent = Silent
    End If
vbwProfiler.vbwExecuteLine 2003 'B
vbwProfiler.vbwProcOut 101
vbwProfiler.vbwExecuteLine 2004
End Function

'Returns EidxTime
Public Function FreeEidx(ByVal ElapsedTime As Long) As Long
vbwProfiler.vbwProcIn 102
Dim Eidx As Long
Dim i As Long
Dim j As Long
Dim BlankEvt As defEvt
Dim Idx As Long

vbwProfiler.vbwExecuteLine 2005
    Idx = SignalFromName(EventClassName)
vbwProfiler.vbwExecuteLine 2006
    If Not IsEvtsInitialised(Evts) Then
vbwProfiler.vbwExecuteLine 2007
        ReDim Evts(0)
vbwProfiler.vbwExecuteLine 2008
        Eidx = 0
vbwProfiler.vbwExecuteLine 2009
        Evts(Eidx).Signal = Idx   'only when first created
vbwProfiler.vbwExecuteLine 2010
        Evts(Eidx).Class = SignalAttributes(Idx).Class
    Else
vbwProfiler.vbwExecuteLine 2011 'B
'See if we already have this event time and Class set up
vbwProfiler.vbwExecuteLine 2012
        Eidx = EventToEidx(ElapsedTime, Idx)
vbwProfiler.vbwExecuteLine 2013
        If Eidx < 0 Then
'Event for this time is not set up is not set up
'Is this a later event than the latest one
vbwProfiler.vbwExecuteLine 2014
            If ElapsedTime > Evts(UBound(Evts)).ElapsedTime Then
vbwProfiler.vbwExecuteLine 2015
                Eidx = UBound(Evts) + 1
vbwProfiler.vbwExecuteLine 2016
                ReDim Preserve Evts(Eidx)
vbwProfiler.vbwExecuteLine 2017
                Evts(Eidx).Signal = Idx   'only when first created
vbwProfiler.vbwExecuteLine 2018
                Evts(Eidx).Class = SignalAttributes(Idx).Class
            Else
vbwProfiler.vbwExecuteLine 2019 'B
'Earlier than latest event, shift events to create a blank event at the required time
'Get the first event that wants shifting up
vbwProfiler.vbwExecuteLine 2020
                For i = 0 To UBound(Evts)
vbwProfiler.vbwExecuteLine 2021
                    If Evts(i).ElapsedTime > ElapsedTime Then
vbwProfiler.vbwExecuteLine 2022
                         Exit For
                    End If
vbwProfiler.vbwExecuteLine 2023 'B
vbwProfiler.vbwExecuteLine 2024
                Next i
'Now Create a new Blank record on the top
vbwProfiler.vbwExecuteLine 2025
                ReDim Preserve Evts(UBound(Evts) + 1)
'Work Sown the array moving each one up
vbwProfiler.vbwExecuteLine 2026
                For j = UBound(Evts) To i + 1 Step -1
vbwProfiler.vbwExecuteLine 2027
                    Evts(j) = Evts(j - 1)
vbwProfiler.vbwExecuteLine 2028
                Next j
'J is 1 less on exit
vbwProfiler.vbwExecuteLine 2029
                Evts(j) = BlankEvt
vbwProfiler.vbwExecuteLine 2030
                Eidx = j
vbwProfiler.vbwExecuteLine 2031
                Evts(Eidx).Signal = Idx   'only when first created
vbwProfiler.vbwExecuteLine 2032
                Evts(Eidx).Class = SignalAttributes(Idx).Class
            End If
vbwProfiler.vbwExecuteLine 2033 'B
        End If
vbwProfiler.vbwExecuteLine 2034 'B
    End If
vbwProfiler.vbwExecuteLine 2035 'B
vbwProfiler.vbwExecuteLine 2036
    Evts(Eidx).ElapsedTime = ElapsedTime
vbwProfiler.vbwExecuteLine 2037
    Evts(Eidx).Focus = -1   'Default (0=Commands(0))
vbwProfiler.vbwExecuteLine 2038
    FreeEidx = Eidx
'frmEvents.ListEvents
vbwProfiler.vbwProcOut 102
vbwProfiler.vbwExecuteLine 2039
End Function

'returns -1 if Idx is invalid (0 is valid)
Public Function FreeBidx(ByVal Eidx As Long, ByVal Idx As Long) As Long
vbwProfiler.vbwProcIn 103
Dim Bidx As Long

vbwProfiler.vbwExecuteLine 2040
    If Idx < 0 Then
vbwProfiler.vbwExecuteLine 2041
MsgBox "Invalid Button Index in FreeBidx"
vbwProfiler.vbwExecuteLine 2042
        FreeBidx = -1
vbwProfiler.vbwProcOut 103
vbwProfiler.vbwExecuteLine 2043
        Exit Function
    End If
vbwProfiler.vbwExecuteLine 2044 'B

vbwProfiler.vbwExecuteLine 2045
    If Not IsButtonsInitialised(Evts(Eidx).Buttons) Then
vbwProfiler.vbwExecuteLine 2046
        ReDim Evts(Eidx).Buttons(0)
vbwProfiler.vbwExecuteLine 2047
        Bidx = 0
vbwProfiler.vbwExecuteLine 2048
        Evts(Eidx).Buttons(Bidx).Button = Idx
    Else
vbwProfiler.vbwExecuteLine 2049 'B
vbwProfiler.vbwExecuteLine 2050
        Bidx = IsBidx(Eidx, Idx)
vbwProfiler.vbwExecuteLine 2051
        If Bidx = 0 Then
vbwProfiler.vbwExecuteLine 2052
            Bidx = UBound(Evts(Eidx).Buttons) + 1
vbwProfiler.vbwExecuteLine 2053
            ReDim Preserve Evts(Eidx).Buttons(Bidx)
vbwProfiler.vbwExecuteLine 2054
            Evts(Eidx).Buttons(Bidx).Button = Idx
        End If
vbwProfiler.vbwExecuteLine 2055 'B
    End If
vbwProfiler.vbwExecuteLine 2056 'B
'    Evts(Eidx).Buttons(Bidx).signal = SignalFromName(EventClassName)
vbwProfiler.vbwExecuteLine 2057
    FreeBidx = Bidx
vbwProfiler.vbwProcOut 103
vbwProfiler.vbwExecuteLine 2058
End Function

'Returns Bidx if an Idx has been set up for this Time
Public Function IsBidx(ByVal Eidx As Long, ByVal Idx As Long) As Long
vbwProfiler.vbwProcIn 104
Dim i As Long
vbwProfiler.vbwExecuteLine 2059
    For i = 0 To UBound(Evts(Eidx).Buttons)
vbwProfiler.vbwExecuteLine 2060
        If Evts(Eidx).Buttons(i).Button = Idx Then
vbwProfiler.vbwExecuteLine 2061
            IsBidx = i
vbwProfiler.vbwProcOut 104
vbwProfiler.vbwExecuteLine 2062
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 2063 'B
vbwProfiler.vbwExecuteLine 2064
    Next i
vbwProfiler.vbwProcOut 104
vbwProfiler.vbwExecuteLine 2065
End Function

'Returns Sidx
Public Function FreeSidx(ByVal Eidx As Long, ByVal Idx As Long) As Long
vbwProfiler.vbwProcIn 105
Dim Sidx As Long

vbwProfiler.vbwExecuteLine 2066
    If Idx < 1 Then
vbwProfiler.vbwExecuteLine 2067
MsgBox "Invalid Signal Index in FreeSidx"
vbwProfiler.vbwExecuteLine 2068
        FreeSidx = -1
vbwProfiler.vbwProcOut 105
vbwProfiler.vbwExecuteLine 2069
        Exit Function
    End If
vbwProfiler.vbwExecuteLine 2070 'B

vbwProfiler.vbwExecuteLine 2071
    If Not IsSignalsInitialised(Evts(Eidx).Signals) Then
vbwProfiler.vbwExecuteLine 2072
        ReDim Evts(Eidx).Signals(0)
vbwProfiler.vbwExecuteLine 2073
        Sidx = 0
vbwProfiler.vbwExecuteLine 2074
        Evts(Eidx).Signals(Sidx).Signal = Idx
    Else
vbwProfiler.vbwExecuteLine 2075 'B
vbwProfiler.vbwExecuteLine 2076
        Sidx = IsSidx(Eidx, Idx)
vbwProfiler.vbwExecuteLine 2077
        If Sidx = 0 Then
vbwProfiler.vbwExecuteLine 2078
            Sidx = UBound(Evts(Eidx).Signals) + 1
vbwProfiler.vbwExecuteLine 2079
            ReDim Preserve Evts(Eidx).Signals(Sidx)
vbwProfiler.vbwExecuteLine 2080
            Evts(Eidx).Signals(Sidx).Signal = Idx
        End If
vbwProfiler.vbwExecuteLine 2081 'B
    End If
vbwProfiler.vbwExecuteLine 2082 'B
'Debug.Print EventClassName
'Set up the signal index
'    Evts(Eidx).Signals(Sidx).signal = SignalFromName(EventClassName)
'Stop
vbwProfiler.vbwExecuteLine 2083
    FreeSidx = Sidx
vbwProfiler.vbwProcOut 105
vbwProfiler.vbwExecuteLine 2084
End Function

'Returns Sidx if an Idx has been set up for this Time
Public Function IsSidx(ByVal Eidx As Long, ByVal Idx As Long) As Long
vbwProfiler.vbwProcIn 106
Dim i As Long
vbwProfiler.vbwExecuteLine 2085
    For i = 0 To UBound(Evts(Eidx).Signals)
vbwProfiler.vbwExecuteLine 2086
        If Evts(Eidx).Signals(i).Signal = Idx Then
vbwProfiler.vbwExecuteLine 2087
            IsSidx = i
vbwProfiler.vbwProcOut 106
vbwProfiler.vbwExecuteLine 2088
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 2089 'B
vbwProfiler.vbwExecuteLine 2090
    Next i
vbwProfiler.vbwProcOut 106
vbwProfiler.vbwExecuteLine 2091
End Function

'
Private Function ClassRecalls()
vbwProfiler.vbwProcIn 107
Dim Eidx As Long
Dim Sidx As Long
Dim Csidx As Long
Dim i As Long

'Create an array of start times
'Must be done in 1 pass because evts will be inserted before the
'current event so Evts & Eidx would change between each pass

vbwProfiler.vbwExecuteLine 2092
    For Eidx = 0 To UBound(Evts)
vbwProfiler.vbwExecuteLine 2093
        If IsSignalsInitialised(Evts(Eidx).Signals) Then
vbwProfiler.vbwExecuteLine 2094
            For Sidx = 0 To UBound(Evts(Eidx).Signals)
vbwProfiler.vbwExecuteLine 2095
                If SignalAttributes(Evts(Eidx).Signals(Sidx).Signal).Group = "Class" Then
vbwProfiler.vbwExecuteLine 2096
                    For Csidx = 1 To UBound(Classes)
vbwProfiler.vbwExecuteLine 2097
                        If Classes(Csidx).Name = SignalAttributes(Evts(Eidx).Signals(Sidx).Signal).Name Then
vbwProfiler.vbwExecuteLine 2098
                            Exit For
                        End If
vbwProfiler.vbwExecuteLine 2099 'B
vbwProfiler.vbwExecuteLine 2100
                    Next Csidx
vbwProfiler.vbwExecuteLine 2101
                    If Evts(Eidx).Signals(Sidx).Raise = "True" Then
vbwProfiler.vbwExecuteLine 2102
                        Classes(Csidx).Signal = Evts(Eidx).Signals(Sidx).Signal
vbwProfiler.vbwExecuteLine 2103
                        Classes(Csidx).Warning = Evts(Eidx).ElapsedTime
                    Else
vbwProfiler.vbwExecuteLine 2104 'B
vbwProfiler.vbwExecuteLine 2105
                        Classes(Csidx).Start = Evts(Eidx).ElapsedTime
                    End If
vbwProfiler.vbwExecuteLine 2106 'B
                End If
vbwProfiler.vbwExecuteLine 2107 'B
vbwProfiler.vbwExecuteLine 2108
            Next Sidx
        End If
vbwProfiler.vbwExecuteLine 2109 'B
vbwProfiler.vbwExecuteLine 2110
    Next Eidx
vbwProfiler.vbwExecuteLine 2111
    EventClassName = Classes(1).Name
vbwProfiler.vbwExecuteLine 2112
    Call LoadStartEvents
vbwProfiler.vbwExecuteLine 2113
    For Csidx = 1 To UBound(Classes)
'Set the EventClass name that will be associated with the Signal & button events
vbwProfiler.vbwExecuteLine 2114
        EventClassName = Classes(Csidx).Name
vbwProfiler.vbwExecuteLine 2115
        Call LoadRecallEvents(Classes(Csidx).Start)
vbwProfiler.vbwExecuteLine 2116
    Next Csidx
vbwProfiler.vbwExecuteLine 2117
    EventClassName = Classes(UBound(Classes)).Name
vbwProfiler.vbwExecuteLine 2118
    Call LoadFinishEvents
vbwProfiler.vbwProcOut 107
vbwProfiler.vbwExecuteLine 2119
End Function
'SYC if we are raising the next Class flag at the same time as lowering
'the Start Class flag, we must silence the raised flag
'(ie the next class Warning)
Private Function ClassSilence()
vbwProfiler.vbwProcIn 108
Dim Eidx As Long
Dim Sidx As Long
Dim Silence As Boolean
Dim i As Long

vbwProfiler.vbwExecuteLine 2120
    For Eidx = 0 To UBound(Evts)
vbwProfiler.vbwExecuteLine 2121
        Silence = False
vbwProfiler.vbwExecuteLine 2122
        If IsSignalsInitialised(Evts(Eidx).Signals) Then
vbwProfiler.vbwExecuteLine 2123
            For Sidx = 0 To UBound(Evts(Eidx).Signals)
vbwProfiler.vbwExecuteLine 2124
                If SignalAttributes(Evts(Eidx).Signals(Sidx).Signal).Group = "Class" Then
vbwProfiler.vbwExecuteLine 2125
                    If Evts(Eidx).Signals(Sidx).Raise = "False" Then
vbwProfiler.vbwExecuteLine 2126
                        Silence = True
                    Else
vbwProfiler.vbwExecuteLine 2127 'B
vbwProfiler.vbwExecuteLine 2128
                        If Silence = True Then
vbwProfiler.vbwExecuteLine 2129
                            Evts(Eidx).Signals(Sidx).Silent = True
                        End If
vbwProfiler.vbwExecuteLine 2130 'B
                    End If
vbwProfiler.vbwExecuteLine 2131 'B
                End If
vbwProfiler.vbwExecuteLine 2132 'B
vbwProfiler.vbwExecuteLine 2133
            Next Sidx
        End If
vbwProfiler.vbwExecuteLine 2134 'B
vbwProfiler.vbwExecuteLine 2135
    Next Eidx
vbwProfiler.vbwProcOut 108
vbwProfiler.vbwExecuteLine 2136
End Function

Public Function aMins(ByVal Seconds As Long) As String
vbwProfiler.vbwProcIn 109
Dim kb As String
vbwProfiler.vbwExecuteLine 2137
    If Seconds < 0 Then
vbwProfiler.vbwExecuteLine 2138
         kb = "-"
    End If
vbwProfiler.vbwExecuteLine 2139 'B
vbwProfiler.vbwExecuteLine 2140
    Seconds = Abs(Seconds)

vbwProfiler.vbwExecuteLine 2141
    kb = kb & Format$(Seconds \ 60, "0")
vbwProfiler.vbwExecuteLine 2142
    kb = kb & ":" & Format$(Seconds Mod 60, "00")
vbwProfiler.vbwExecuteLine 2143
    aMins = kb
vbwProfiler.vbwProcOut 109
vbwProfiler.vbwExecuteLine 2144
End Function

