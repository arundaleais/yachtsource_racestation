Attribute VB_Name = "modMain"
Option Explicit

Public Const cbDefault = &H8000000F
Public Declare Function ShellExecute _
                            Lib "SHELL32.DLL" _
                            Alias "ShellExecuteA" ( _
                            ByVal hwnd As Long, _
                            ByVal lpOperation As String, _
                            ByVal lpFile As String, _
                            ByVal lpParameters As String, _
                            ByVal lpDirectory As String, _
                            ByVal nShowCmd As Long) _
                            As Long

'Public Declare Function Beep Lib "kernel32" (ByVal dwFreq As Long, ByVal dwDuration As Long) As Long

Public cbOrange As Long

Public Type defLink
    Type As String  'UpLink or DownLink (Replaces using UpLink & DownLink)
    Flag As Long    'The Link Flag that is associated
    Raise As Boolean    'True = Raise Linked Flag, False=Lower Linked Flag
    Temp As Boolean     'True = DeleteLink when actioned
End Type

Public Type defFlag  'Properties where to display the Image (Blank if not displayed)
    Pos As Long         'Flag(idx) = 0 if not Up (Both Row & Col > 0)
    Row As Long         'Row on which to display the flag,  Set on UP, Clear after down
    Col As Long         'Col on which to display the flag
    FixedRow As Long 'Position is preset on load, so do not clear on event
    FixedCol As Long
    Queue As Boolean    'Queue any Flag Event (Sounds, Controllers), do not clear on event
    Changed As Boolean  'Used to generate Controller Event  'Clear after event handled
End Type

Private Type defGroupDefault  'Are applied to the above when Signal Is Loaded (by LoadProfile)
    Group As String     'Group to which these defaults are applied
    FixedRow As Long
    FixedCol As Long
    Queue As Boolean
End Type

Private Type defController
    Name As String
    IpAddress As String
    On As String
    Off As String
    Connection As String
    Sound As String
End Type

'Public Type defGroup    'Only defined for Fixed Groups (Sound, Lights)
'    GroupName As String
'    Queue As Boolean    'Process signals sequentially
'End Type

Private Type defSignalAttribute 'Initialled loaded from .ini file [Signal] section
'These are defined again as they are used once the timer is
'running - they are loaded from the UpDown
'These are the same for OFF and ON
    Type As String  'Class, Finish, Sound, Recall
    Name As String  'Name of the Signal  Class Flag 1
    Image As Picture    'GIF image
    Flag As defFlag   'Flag Attributes
    Group As String  'Flag is positioned below any UP Flag in this Group
    TTL As Long     'Time this flag is displayed in Millisecs
                    'It will be off for the same Period (if more than 1 cycle)
    CyclesRequired As Long  'No of On cycles by timer before creating OFF event
    OnCycles As Long    'Count of on cycles, completed after next off(when timer is enabled)
    TTD As Long         'Time Off
    ImageFilePath As String 'Flag Image
                            'timer must be unique
    Links() As defLink   'Used when signal is Raised(UP) & when Lowered(Down)
    Controller As Long  'This is the controller used when the flag is visible
                        '-1 = no linked controller
    Silent As Boolean   'Set by DoTimerEvents if Sound Signals are not generated by the link
                        'Must be unset by DoTimerEvents as well
End Type

Private Type defSignalEvt
    Signal As Long
    Message As String
    Raise As String         'Up, Down or ""     'Cannot be defined as Boolean
    Silent As String        'True, False or ""  'as we wanny tell if it wants leaving or changing
End Type

Private Type defButtonEvt
    Button As Long
    Enabled As String       'True, False or "" (dont change)
End Type

Private Type defEvt
    ElapsedTime As Long
    Signals() As defSignalEvt
    Buttons() As defButtonEvt
    Focus As Long           'Idx of Command button to give focus to (0)=none
                            'Note BackColor wants cnaging to Green if it was Default
End Type

Private IniNewEvent As clsEvent    'This is used to keep the variables require to setup
'a New Event from the .ini file

Public IniFileName As String

Public Loading As Boolean   'Suppress Queueing Commands

Public Controllers() As defController
Public SignalAttributes() As defSignalAttribute
Public Evts() As defEvt
Public Myprofile As clsProfile
'Public FixedGroups() As defGroup    'Group predefined for this column
Public ElapsedTime As Long  'Seconds before or after start time
Public Multiplier As Long
Public RecallIdx As Long    'Keep to remove necessity of looking up at end of time cycle
Public RowCount As Long
Public ColCount As Long
Public ColCountFree As Long 'ColCount less any Fixed Cols
Private SignalImageFilePath As String
Private DebugLoadProfile As Boolean

Sub Main()
'    Action.Load (Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sequences\" & "ScarboroughMultiple.csv")
    vbwInitializeProfiler ' Initialize VB Watch
vbwProfiler.vbwProcIn 62
vbwProfiler.vbwExecuteLine 1057
    cbOrange = RGB(255, 102, 0) '    RGB(255, 153, 0)
vbwProfiler.vbwExecuteLine 1058
    Multiplier = 20
vbwProfiler.vbwExecuteLine 1059
    Load frmMain
vbwProfiler.vbwExecuteLine 1060
    If frmMain.cboProfile.ListCount = 0 Then
vbwProfiler.vbwExecuteLine 1061
        Unload frmMain  'exit program
    Else
vbwProfiler.vbwExecuteLine 1062 'B
vbwProfiler.vbwExecuteLine 1063
        frmMain.Show
    End If
vbwProfiler.vbwExecuteLine 1064 'B


'    If IniFileName <> "" Then
'        Call LoadProfile(frmMain.cboProfile.List(frmMain.cboProfile.ListIndex))
'        frmMain.RaceTimer.Enabled = True
'    End If
vbwProfiler.vbwProcOut 62
vbwProfiler.vbwExecuteLine 1065
End Sub
'False if it fails

Public Function TimerOutput(OutputTime As Date) As Boolean
'Debug.Print Format$(OutputTime, "hh:mm:ss")
vbwProfiler.vbwProcIn 63
vbwProfiler.vbwExecuteLine 1066
    TimerOutput = True
vbwProfiler.vbwProcOut 63
vbwProfiler.vbwExecuteLine 1067
End Function

'Converts a Nul string to "0"
Public Function NulToZero(TxtIn As String) As String
vbwProfiler.vbwProcIn 64
vbwProfiler.vbwExecuteLine 1068
    If TxtIn = "" Then
vbwProfiler.vbwExecuteLine 1069
        NulToZero = "0"
    Else
vbwProfiler.vbwExecuteLine 1070 'B
vbwProfiler.vbwExecuteLine 1071
        NulToZero = TxtIn
    End If
vbwProfiler.vbwExecuteLine 1072 'B
vbwProfiler.vbwProcOut 64
vbwProfiler.vbwExecuteLine 1073
End Function

#If False Then
Public Function DoTimerEvents_old(ElapsedTime As Long) As Boolean
Dim MyEvent As clsEvent
'Dim LastEvent As clsEvent
'Dim FirstEvent As clsEvent
Dim NextStartIdx As Long
'Stop
    If Myprofile.IsEventDue(ElapsedTime) = False Then
'If ElapsedTime = 0 Then Stop
        Exit Function
    End If
                                    
    DoTimerEvents = True    'Start sequence has started
    For Each MyEvent In Myprofile
'If MyEvent.Signal = 0 Then Stop
        If MyEvent.Second = ElapsedTime Then
Debug.Print MyEvent.Second & " " & MyEvent.Signal & " " & MyEvent.Raised
'MakeSignals will generated any linked signals
'And use the SignalTimer if required
            Call MakeSignals(MyEvent.Signal, MyEvent.Raised)
        End If
    Next MyEvent
    
'    Set FirstEvent = myProfile.FirstEvent
'    Set LastEvent = myProfile.LastEvent

'If Timer Events have started and not finished you cannot Postpone
    With frmMain
        Select Case ElapsedTime
        Case Is >= Myprofile.LastEvent.Second
'Start Sequence finished

            Select Case .cmdRecall.BackColor
            Case Is = vbRed
'Start recall timer (if not running)
                If .SignalTimer(SignalIdx("Recall")).Enabled = False Then
                    Call MakeSignals(SignalIdx("Recall"), True)
                    Call MakeSignals(SignalIdx("Sound"), True)
                End If
            Case Is = vbGreen
'Recall not pressed at moment of start
                .cmdRecall.BackColor = cbDefault
                .cmdFinish.BackColor = vbGreen
                .cmdFinish.SetFocus
            Case Else
'If recall never been pressed
            End Select
        Case Is >= Myprofile.FirstEvent.Second
'Start Sequence Running
'            .cmdPostpone.BackColor = cbDefault
'Only set it once
            If .cmdRecall.BackColor = cbDefault Then
                .cmdRecall.BackColor = vbGreen
                .cmdRecall.SetFocus
            End If
        Case Else
'Start Sequence not started
 '           .cmdPostpone.BackColor = vbGreen
 '           .cmdPostpone.Enabled = True
 '           .cmdPostpone.SetFocus
        End Select
    End With
'    Set FirstEvent = Nothing
'    Set LastEvent = Nothing
    
    NextStartIdx = NextStartSignalIdx
    If NextStartIdx Then
        frmMain.StatusBar1.Panels(1).Text = "Next Start " & SignalAttributes(NextStartIdx).Name
    Debug.Print "NextStart " & SignalAttributes(NextStartIdx).Name
        frmMain.cmdRecall.Enabled = True
    Else
'All classes have started
        frmMain.StatusBar1.Panels(1).Text = "All Classes Started"
'Remove the Pospenment signal
'        frmMain.cmdPostpone.BackColor = cbDefault
        
        Debug.Print "All Classes Started"
'Stop
    End If


End Function
#End If

#If False Then
'Must use after the MakeSignal has run
Public Function NextStartSignalIdx() As Long
Dim MyEvent As clsEvent

    For Each MyEvent In Myprofile
'If MyEvent.Signal = 0 Then Stop
        If MyEvent.Second <= ElapsedTime Then
            With SignalAttributes(MyEvent.Signal)
                If .Type = "Class" Then
                    If frmMain.Flags(.FlagIndex).Visible = True Then
                        NextStartSignalIdx = .FlagIndex
                        Exit Function
                    End If
                End If
            End With
        End If
    Next MyEvent
End Function
#End If
'Using Raised because On is a reserved word
'The code is triggered every time a Signal changes state
Public Function MakeSignals(Signal As Long, Raised As Boolean)
vbwProfiler.vbwProcIn 65
Dim LinkIndex As Long
Static LastEventTime As Long    'To keep any status messages for subsequent event at same time
Dim Message As String
vbwProfiler.vbwExecuteLine 1074
Stop
#If False Then
'    frmMain.StatusBar1.Panels(2).Text = ""
    If Signal < LBound(SignalAttributes) Or Signal > UBound(SignalAttributes) Then
        MsgBox "Signal " & Signal & " not defined", vbExclamation, "MakeSignals"
        Exit Function
    End If
    
    If frmMain.Flags(Signal).Visible <> Raised Then
'Change the Flag to what has been asked for
        frmMain.Flags(Signal).Visible = Raised
'Don't start the timer until Linked have been  Raised/Lowered

'The Link Flag may have been changed eg 2 Short to 3 Short
'if recall required

'Check if a Link needs changing as well
        
'Choose the Raised or Lowered Link
        If Raised = True Then
            LinkIndex = 2  'Parent signal Raised
        Else
            LinkIndex = 1
        End If

        With SignalAttributes(Signal)
'Set this Link
            With .Link(LinkIndex)
'See if we have a Link (for this visibility)
                If .Flag > 0 Then
'This is re-entrant into this function
                    Call MakeSignals(.Flag, .Raise)
'Stop
                End If
            End With

'If SignalTimer is required for this signal
'And it is not already running, start the timer
'            If frmMain.SignalTimer(Signal).Enabled = False Then
'                If .TTL <> 0 Then
'                    frmMain.SignalTimer(Signal).Enabled = True
'                End If
'            Else
'If the timer is running, don't re-enable the timer
'            End If
        
        Select Case .Type
        Case Is = "Class"
            If Raised = True Then
'A class has a Warning
Debug.Print .Name & " " & "Up"
                Message = .Name & " Up"
            Else
'A class Start
                Message = .Name & " Down"
Debug.Print .Name & " " & "Dn"
            End If
            If LastEventTime <> ElapsedTime Then frmMain.StatusBar1.Panels(2).Text = ""
            If Message <> "" Then
                If frmMain.StatusBar1.Panels(2).Text = "" Then
                    frmMain.StatusBar1.Panels(2).Text = Message
                Else
                    frmMain.StatusBar1.Panels(2).Text = frmMain.StatusBar1.Panels(2).Text & ", " & Message
                End If
            End If
            LastEventTime = ElapsedTime
        Case Else
        End Select
        End With
    Else
'State of Signal has not changed
'Stop
    End If
#End If
vbwProfiler.vbwProcOut 65
vbwProfiler.vbwExecuteLine 1075
End Function

Public Function LoadProfile()
vbwProfiler.vbwProcIn 66

Dim i As Long
Dim j As Long
Dim Secs As Long
Dim Ch As Long
Dim nextline As String
Dim Section As String   'Signal=nnn
Dim CleanLine As String
Dim CleanSection As String
Dim arry() As String    'Name=Values (Multiple Values Comma separated)
Dim arry1() As String   'Values in arry(1)
Dim Idx As Long   'Signal is the only section requiring an index (at the moment)
Dim ProfileFileName As String
Dim Cidx As Long    'Controller() index
Dim Eidx As Long    'Evts(Eidx) index   base = 0
Dim Sidx As Long    'Evts(Eidx).Signals(Sidx).Index base = 0
Dim Bidx As Long    'Evts(Eidx).Buttons(Bidx).Index base = 0
Dim MySignalTimer As Timer
Dim MyFont As New StdFont
Dim MyPicture As New StdPicture
Dim MyFrame As Frame
Dim MyLink As defLink
Dim CommandFixed As Boolean     'Do not try and reposition this command
Dim SectionError As Boolean
Dim GroupDefaults() As defGroupDefault
Dim Lidx As Long    'SignalAttributes(Idx).Links(Lidx).Index
vbwProfiler.vbwExecuteLine 1076
Debug.Print "==============="
vbwProfiler.vbwExecuteLine 1077
    SignalImageFilePath = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\SignalImages\"

'Start a fresh Profile
vbwProfiler.vbwExecuteLine 1078
    frmMain.RaceTimer.Enabled = False
vbwProfiler.vbwExecuteLine 1079
    Loading = True
'Clear existing profile

'Set up Controller(0) for the Horn, even if nothing connected
vbwProfiler.vbwExecuteLine 1080
    ReDim Controllers(0)
vbwProfiler.vbwExecuteLine 1081
    ReDim GroupDefaults(0)
vbwProfiler.vbwExecuteLine 1082
    Set Myprofile = Nothing     'This terminates all clsEvents as well
vbwProfiler.vbwExecuteLine 1083
    Set Myprofile = New clsProfile
vbwProfiler.vbwExecuteLine 1084
    ReDim SignalAttributes(1 To 1)  'this will clear the array
vbwProfiler.vbwExecuteLine 1085
    Erase Evts
'Set up Controller(0) for the Horn, even if nothing connected
'Min of 1 controller
vbwProfiler.vbwExecuteLine 1086
    Call frmMain.ResetSignalTimers
vbwProfiler.vbwExecuteLine 1087
    Call frmMain.ResetCommands
vbwProfiler.vbwExecuteLine 1088
    Call frmMain.ResetFlags
'    Call frmMain.ResetEvents no longer required
'Set up new profile
vbwProfiler.vbwExecuteLine 1089
    frmMain.Caption = App.EXEName & " [" & App.Major & "." & App.Minor & "." _
    & App.Revision & "] " & frmMain.cboProfile.List(frmMain.cboProfile.ListIndex)

vbwProfiler.vbwExecuteLine 1090
    ProfileFileName = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sequences\" _
    & frmMain.cboProfile.List(frmMain.cboProfile.ListIndex) & ".ini"
vbwProfiler.vbwExecuteLine 1091
    Ch = FreeFile
vbwProfiler.vbwExecuteLine 1092
    Open ProfileFileName For Input As #Ch
'vbwLine 1093:    Do Until EOF(Ch)
    Do Until vbwProfiler.vbwExecuteLine(1093) Or EOF(Ch)
vbwProfiler.vbwExecuteLine 1094
        Line Input #Ch, nextline
'Strip Comments
vbwProfiler.vbwExecuteLine 1095
        i = InStr(1, nextline, "'")
vbwProfiler.vbwExecuteLine 1096
        If i > 0 Then
vbwProfiler.vbwExecuteLine 1097
            CleanLine = Left$(nextline, i - 1)
        Else
vbwProfiler.vbwExecuteLine 1098 'B
vbwProfiler.vbwExecuteLine 1099
            CleanLine = nextline
        End If
vbwProfiler.vbwExecuteLine 1100 'B
'Remove leading & trailing whitespace
vbwProfiler.vbwExecuteLine 1101
        CleanLine = Replace(CleanLine, vbTab, "")
vbwProfiler.vbwExecuteLine 1102
        CleanLine = Trim(CleanLine)
vbwProfiler.vbwExecuteLine 1103
        If CleanLine <> "" Then
vbwProfiler.vbwExecuteLine 1104
Debug.Print CleanLine
vbwProfiler.vbwExecuteLine 1105
            i = InStr(1, CleanLine, "[")
vbwProfiler.vbwExecuteLine 1106
            If (i > 0) Then
'This is Open or Close Section
vbwProfiler.vbwExecuteLine 1107
                j = InStrRev(CleanLine, "]")
vbwProfiler.vbwExecuteLine 1108
                If j < i Then
vbwProfiler.vbwExecuteLine 1109
                    MsgBox "Parse error:" & vbCrLf & nextline, vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1110
                    CleanLine = ""  'skip this line
                Else
vbwProfiler.vbwExecuteLine 1111 'B
vbwProfiler.vbwExecuteLine 1112
                    CleanSection = Mid$(CleanLine, i + 1, j - i - 1)
'If Cleaned up Section not blank
vbwProfiler.vbwExecuteLine 1113
                    If Len(CleanSection) > 0 Then
vbwProfiler.vbwExecuteLine 1114
                        arry = Split(CleanSection, "=")
vbwProfiler.vbwExecuteLine 1115
                        If Left$(arry(0), 1) <> "/" Then
'Open section (Sets up Section & SectionIndex to be used by next Input Lines
vbwProfiler.vbwExecuteLine 1116
                            If Section <> "" Then   'Already got a Section set
vbwProfiler.vbwExecuteLine 1117
                                MsgBox "Can't open Section " & CleanSection & vbCrLf _
                                & "Section [" & Section & "] is still open", vbExclamation, "LoadProfile"
                            Else
vbwProfiler.vbwExecuteLine 1118 'B
vbwProfiler.vbwExecuteLine 1119
                                Section = arry(0)
vbwProfiler.vbwExecuteLine 1120
                                If Section <> "" Then
'Set up the new section [...]
vbwProfiler.vbwExecuteLine 1121
                                    CommandFixed = False
vbwProfiler.vbwExecuteLine 1122
                                    Select Case Section
'vbwLine 1123:                                    Case Is = "Profile"
                                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1123), VBWPROFILER_EMPTY, _
        "Profile")
'vbwLine 1124:                                    Case Is = "Event"
                                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1124), VBWPROFILER_EMPTY, _
        "Event")
'Arry1 contains the Event Time
vbwProfiler.vbwExecuteLine 1125
                                        If Not IsEvtsInitialised(Evts) Then
vbwProfiler.vbwExecuteLine 1126
                                            ReDim Evts(0)
vbwProfiler.vbwExecuteLine 1127
                                            Eidx = 0
                                        Else
vbwProfiler.vbwExecuteLine 1128 'B
'See if we already have this event time set up
vbwProfiler.vbwExecuteLine 1129
                                            If IsEventDue(CLng(arry(1) / Multiplier)) < 1 Then
vbwProfiler.vbwExecuteLine 1130
                                                Eidx = UBound(Evts) + 1
vbwProfiler.vbwExecuteLine 1131
                                                ReDim Preserve Evts(Eidx)
                                            End If
vbwProfiler.vbwExecuteLine 1132 'B
                                        End If
vbwProfiler.vbwExecuteLine 1133 'B
vbwProfiler.vbwExecuteLine 1134
                                        Evts(Eidx).ElapsedTime = CLng(arry(1)) / Multiplier
'vbwLine 1135:                                    Case Is = "Controller"
                                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1135), VBWPROFILER_EMPTY, _
        "Controller")
'Arry1 contains the Controller index
vbwProfiler.vbwExecuteLine 1136
                                        If IsNumeric(arry(1)) Then
vbwProfiler.vbwExecuteLine 1137
                                            Cidx = arry(1)
vbwProfiler.vbwExecuteLine 1138
                                            If Cidx > UBound(Controllers) Then
vbwProfiler.vbwExecuteLine 1139
                                                ReDim Preserve Controllers(Cidx)
                                            End If
vbwProfiler.vbwExecuteLine 1140 'B
                                        End If
vbwProfiler.vbwExecuteLine 1141 'B
vbwProfiler.vbwExecuteLine 1142
                                        Controllers(Cidx).Name = "Controller (" & Cidx & ")"
'vbwLine 1143:                                    Case Is = "Signal"
                                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1143), VBWPROFILER_EMPTY, _
        "Signal")
vbwProfiler.vbwExecuteLine 1144
                                        Lidx = 0
vbwProfiler.vbwExecuteLine 1145
                                        If IsNumeric(arry(1)) Then
vbwProfiler.vbwExecuteLine 1146
                                            Idx = arry(1)
'Create the Signal Attributes array index
vbwProfiler.vbwExecuteLine 1147
                                            If Idx > UBound(SignalAttributes) Then
vbwProfiler.vbwExecuteLine 1148
                                                i = UBound(SignalAttributes)
vbwProfiler.vbwExecuteLine 1149
                                                ReDim Preserve SignalAttributes(1 To Idx)
                                            Else
vbwProfiler.vbwExecuteLine 1150 'B
'Idx(1) is always created
vbwProfiler.vbwExecuteLine 1151
                                                If Idx > 1 Then
'Signals must be created in ascending order
vbwProfiler.vbwExecuteLine 1152
MsgBox "Duplicated Signal(" & Idx & ") detected", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1153
                                                    Section = ""
vbwProfiler.vbwExecuteLine 1154
                                                    GoTo Skip_Line
                                                End If
vbwProfiler.vbwExecuteLine 1155 'B
                                            End If
vbwProfiler.vbwExecuteLine 1156 'B
'Default is None
vbwProfiler.vbwExecuteLine 1157
                                            SignalAttributes(Idx).Controller = -1
'Create a timer for each Signal (even if we dont use it)
vbwProfiler.vbwExecuteLine 1158
                                            Load frmMain.SignalTimer(Idx)
'Create the Command(idx) if it doesn't exist
vbwProfiler.vbwExecuteLine 1159
                                            If CommandExists(Idx) Then
vbwProfiler.vbwExecuteLine 1160
                                                CommandFixed = True
                                            Else
vbwProfiler.vbwExecuteLine 1161 'B
vbwProfiler.vbwExecuteLine 1162
                                                Load frmMain.Commands(Idx)
'                                                frmMain.Commands(Idx).Visible = True
'Loads it disabled (not sure why)
vbwProfiler.vbwExecuteLine 1163
                                                frmMain.Commands(Idx).Enabled = True
                                            End If
vbwProfiler.vbwExecuteLine 1164 'B
'Create the Image Control if it doesnt exist
                                        Else
vbwProfiler.vbwExecuteLine 1165 'B
vbwProfiler.vbwExecuteLine 1166
                                            MsgBox "Section " & Section & " has no Index", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1167
                                            Section = ""
                                        End If
vbwProfiler.vbwExecuteLine 1168 'B
                                    Case Else
vbwProfiler.vbwExecuteLine 1169 'B
vbwProfiler.vbwExecuteLine 1170
                                        MsgBox "Section " & Section & " not Defined", vbCritical, "LoadProfile"
vbwProfiler.vbwExecuteLine 1171
                                        Section = ""
                                    End Select
vbwProfiler.vbwExecuteLine 1172 'B
                                End If
vbwProfiler.vbwExecuteLine 1173 'B
                            End If
vbwProfiler.vbwExecuteLine 1174 'B
                        Else
vbwProfiler.vbwExecuteLine 1175 'B
'Close section [/...]
vbwProfiler.vbwExecuteLine 1176
                            If Mid$(arry(0), 2) <> Section Then
vbwProfiler.vbwExecuteLine 1177
                                MsgBox "Section " & CleanSection _
                                & " not open", vbExclamation, "LoadProfile"
                            Else
vbwProfiler.vbwExecuteLine 1178 'B
vbwProfiler.vbwExecuteLine 1179
                                Select Case Section
'vbwLine 1180:                                Case Is = "Profile"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1180), VBWPROFILER_EMPTY, _
        "Profile")
'vbwLine 1181:                                Case Is = "Controller"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1181), VBWPROFILER_EMPTY, _
        "Controller")
'Stop
vbwProfiler.vbwExecuteLine 1182
                                    Cidx = 0    'End of this Controller Default
'vbwLine 1183:                                Case Is = "Signal"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1183), VBWPROFILER_EMPTY, _
        "Signal")
'We have to so this at the end of the section because if CommandVisible has been changed
'we do not want to position it
vbwProfiler.vbwExecuteLine 1184
                                    If CommandFixed = False Then
vbwProfiler.vbwExecuteLine 1185
                                        Call frmMain.PositionCommand(Idx)
                                    End If
vbwProfiler.vbwExecuteLine 1186 'B
'Set command button caption to same as flag
vbwProfiler.vbwExecuteLine 1187
                                    frmMain.Commands(Idx).Caption = SignalAttributes(Idx).Name
vbwProfiler.vbwExecuteLine 1188
                                    Idx = 0       'End of this signal
'vbwLine 1189:                                Case Is = "Event"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1189), VBWPROFILER_EMPTY, _
        "Event")
'With Event we Create the new Event when we have all the values (when the tag is closed)
'NewEvent(Second As Long, Message As Long, Signal As Long, State As Boolean)
vbwProfiler.vbwExecuteLine 1190
                                    With IniNewEvent
vbwProfiler.vbwExecuteLine 1191
                                        Myprofile.NewEvent .Second, .Message, .Signal, .Silent, .Raised
vbwProfiler.vbwExecuteLine 1192
                                    End With
vbwProfiler.vbwExecuteLine 1193
                                    Set IniNewEvent = Nothing
                                End Select
vbwProfiler.vbwExecuteLine 1194 'B
vbwProfiler.vbwExecuteLine 1195
                                Section = ""
vbwProfiler.vbwExecuteLine 1196
                                Idx = 0
                            End If 'End Close Opened Section Section
vbwProfiler.vbwExecuteLine 1197 'B
                        End If  'Close Section
vbwProfiler.vbwExecuteLine 1198 'B
                    End If  'Clean Section not blank
vbwProfiler.vbwExecuteLine 1199 'B
                End If  'Valid Section parsed
vbwProfiler.vbwExecuteLine 1200 'B
vbwProfiler.vbwExecuteLine 1201
                CleanSection = ""

            Else
vbwProfiler.vbwExecuteLine 1202 'B
'Not [Section] or [/Section]
'So it must be a Line within a section
vbwProfiler.vbwExecuteLine 1203
                If Section <> "" Then
'Split the line arry Name=Value1,Value2
vbwProfiler.vbwExecuteLine 1204
                    arry = Split(CleanLine, "=")
vbwProfiler.vbwExecuteLine 1205
                    ReDim arry1(0)
vbwProfiler.vbwExecuteLine 1206
                    If UBound(arry) > 0 Then
vbwProfiler.vbwExecuteLine 1207
                        arry1 = Split(arry(1), ",")
                    End If
vbwProfiler.vbwExecuteLine 1208 'B

vbwProfiler.vbwExecuteLine 1209
                    Select Case Section
'vbwLine 1210:                    Case Is = "Profile"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1210), VBWPROFILER_EMPTY, _
        "Profile")
vbwProfiler.vbwExecuteLine 1211
                        Select Case arry(0)
'vbwLine 1212:                        Case Is = "Name"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1212), VBWPROFILER_EMPTY, _
        "Name")
 'Now use the file name thas is displayed in the Combo box
 '                           frmMain.Caption = App.EXEName & " [" & App.Major & "." & App.Minor & "." _
 '                           & App.Revision & "] " & arry(1)
'vbwLine 1213:                        Case Is = "Version"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1213), VBWPROFILER_EMPTY, _
        "Version")
 'This is the version of the .ini file
'vbwLine 1214:                        Case Is = "GroupDefault"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1214), VBWPROFILER_EMPTY, _
        "GroupDefault")
vbwProfiler.vbwExecuteLine 1215
                            For i = 1 To UBound(GroupDefaults)
vbwProfiler.vbwExecuteLine 1216
                                If GroupDefaults(i).Group = arry1(0) Then
vbwProfiler.vbwExecuteLine 1217
                                    Exit For
                                End If
vbwProfiler.vbwExecuteLine 1218 'B
vbwProfiler.vbwExecuteLine 1219
                            Next i
vbwProfiler.vbwExecuteLine 1220
                            If i > UBound(GroupDefaults) Then
vbwProfiler.vbwExecuteLine 1221
                                ReDim Preserve GroupDefaults(i)
                            End If
vbwProfiler.vbwExecuteLine 1222 'B
vbwProfiler.vbwExecuteLine 1223
                            GroupDefaults(i).Group = arry1(0)
vbwProfiler.vbwExecuteLine 1224
                            For j = 1 To UBound(arry1)
vbwProfiler.vbwExecuteLine 1225
                                Select Case arry1(j)
'vbwLine 1226:                                Case Is = "LastCol"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1226), VBWPROFILER_EMPTY, _
        "LastCol")
vbwProfiler.vbwExecuteLine 1227
                                    GroupDefaults(i).FixedCol = ColCount
vbwProfiler.vbwExecuteLine 1228
                                    ColCountFree = ColCount - 1
'vbwLine 1229:                                Case Is = "LastCol-1"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1229), VBWPROFILER_EMPTY, _
        "LastCol-1")
vbwProfiler.vbwExecuteLine 1230
                                    GroupDefaults(i).FixedCol = ColCount - 1
vbwProfiler.vbwExecuteLine 1231
                                    ColCountFree = ColCount - 2
'vbwLine 1232:                                Case Is = "Row1"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1232), VBWPROFILER_EMPTY, _
        "Row1")
vbwProfiler.vbwExecuteLine 1233
                                    GroupDefaults(i).FixedRow = 1
'vbwLine 1234:                                Case Is = "Row2"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1234), VBWPROFILER_EMPTY, _
        "Row2")
vbwProfiler.vbwExecuteLine 1235
                                    GroupDefaults(i).FixedRow = 2
'vbwLine 1236:                                Case Is = "Row3"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1236), VBWPROFILER_EMPTY, _
        "Row3")
vbwProfiler.vbwExecuteLine 1237
                                    GroupDefaults(i).FixedRow = 3
'vbwLine 1238:                                Case Is = "Row4"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1238), VBWPROFILER_EMPTY, _
        "Row4")
vbwProfiler.vbwExecuteLine 1239
                                    GroupDefaults(i).FixedRow = 4
'vbwLine 1240:                                Case Is = "Queue"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1240), VBWPROFILER_EMPTY, _
        "Queue")
vbwProfiler.vbwExecuteLine 1241
                                    GroupDefaults(i).Queue = True
                                Case Else
vbwProfiler.vbwExecuteLine 1242 'B
vbwProfiler.vbwExecuteLine 1243
                                    MsgBox "Invalid " & arry1(j) & " in Profile Section " & Section
                                End Select
vbwProfiler.vbwExecuteLine 1244 'B
vbwProfiler.vbwExecuteLine 1245
                            Next j
                        Case Else
vbwProfiler.vbwExecuteLine 1246 'B
vbwProfiler.vbwExecuteLine 1247
                            MsgBox "Invalid " & arry(0) & " in Profile Section " & Section
                        End Select
vbwProfiler.vbwExecuteLine 1248 'B
'vbwLine 1249:                    Case Is = "Controller"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1249), VBWPROFILER_EMPTY, _
        "Controller")
vbwProfiler.vbwExecuteLine 1250
                        Select Case arry(0)
'vbwLine 1251:                        Case Is = "Name"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1251), VBWPROFILER_EMPTY, _
        "Name")
vbwProfiler.vbwExecuteLine 1252
                            Controllers(Cidx).Name = arry(1)
'vbwLine 1253:                        Case Is = "IpAddress"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1253), VBWPROFILER_EMPTY, _
        "IpAddress")
vbwProfiler.vbwExecuteLine 1254
                            Controllers(Cidx).IpAddress = arry(1)
'vbwLine 1255:                        Case Is = "On"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1255), VBWPROFILER_EMPTY, _
        "On")
vbwProfiler.vbwExecuteLine 1256
                            Controllers(Cidx).On = arry(1)
'vbwLine 1257:                        Case Is = "Off"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1257), VBWPROFILER_EMPTY, _
        "Off")
vbwProfiler.vbwExecuteLine 1258
                            Controllers(Cidx).Off = arry(1)
'vbwLine 1259:                        Case Is = "Connection"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1259), VBWPROFILER_EMPTY, _
        "Connection")
vbwProfiler.vbwExecuteLine 1260
                            Controllers(Cidx).Connection = arry(1)
'vbwLine 1261:                        Case Is = "Sound"
                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1261), VBWPROFILER_EMPTY, _
        "Sound")
'Check PC has sound available
vbwProfiler.vbwExecuteLine 1262
                            If HasSound = True Then
vbwProfiler.vbwExecuteLine 1263
                                If FileExists(Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sounds\" & arry(1)) Then
vbwProfiler.vbwExecuteLine 1264
                                    Controllers(Cidx).Sound = arry(1)
vbwProfiler.vbwExecuteLine 1265
                                    SoundFilePath = Environ("AllUsersProfile") & "\Application Data\Arundale\RacingSignals\Sounds\"
                                Else
vbwProfiler.vbwExecuteLine 1266 'B
vbwProfiler.vbwExecuteLine 1267
MsgBox "Sound File " & arry1(0) & " doesnt exist"
                                End If
vbwProfiler.vbwExecuteLine 1268 'B
                            End If
vbwProfiler.vbwExecuteLine 1269 'B
                        Case Else
vbwProfiler.vbwExecuteLine 1270 'B
vbwProfiler.vbwExecuteLine 1271
                            MsgBox "Invalid " & arry(0) & " in Controller Section " & Section
                        End Select
vbwProfiler.vbwExecuteLine 1272 'B
'vbwLine 1273:                    Case Is = "Signal"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1273), VBWPROFILER_EMPTY, _
        "Signal")
'Check again we've got an index
vbwProfiler.vbwExecuteLine 1274
                        If Idx > 0 Then
vbwProfiler.vbwExecuteLine 1275
                            Select Case arry(0)
'vbwLine 1276:                            Case Is = "Type"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1276), VBWPROFILER_EMPTY, _
        "Type")
vbwProfiler.vbwExecuteLine 1277
                                SignalAttributes(Idx).Type = arry(1)
'vbwLine 1278:                            Case Is = "Name"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1278), VBWPROFILER_EMPTY, _
        "Name")
vbwProfiler.vbwExecuteLine 1279
                                SignalAttributes(Idx).Name = arry(1)
'vbwLine 1280:                            Case Is = "TTL"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1280), VBWPROFILER_EMPTY, _
        "TTL")
vbwProfiler.vbwExecuteLine 1281
                                SignalAttributes(Idx).TTL = arry(1)
'Set TTD as same as TTL (On and Off for same time) - Is a Default
vbwProfiler.vbwExecuteLine 1282
                                SignalAttributes(Idx).TTD = arry(1)
'Set timer interval immediately before it is enabled
'                                frmMain.SignalTimer(Idx).Interval = arry(1)
'vbwLine 1283:                            Case Is = "TTD"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1283), VBWPROFILER_EMPTY, _
        "TTD")
vbwProfiler.vbwExecuteLine 1284
                                SignalAttributes(Idx).TTD = arry(1)
'vbwLine 1285:                            Case Is = "Cycles"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1285), VBWPROFILER_EMPTY, _
        "Cycles")
vbwProfiler.vbwExecuteLine 1286
                                Select Case SignalAttributes(Idx).Type
'Type must have been set in .ini before Cycles
'vbwLine 1287:                                Case Is = "Recall", "Postpone"
                                Case Is = IIf(vbwProfiler.vbwExecuteLine(1287), VBWPROFILER_EMPTY, _
        "Recall"), "Postpone"
vbwProfiler.vbwExecuteLine 1288
                                    SignalAttributes(Idx).CyclesRequired = arry(1) / Multiplier
                                Case Else
vbwProfiler.vbwExecuteLine 1289 'B
vbwProfiler.vbwExecuteLine 1290
                                    SignalAttributes(Idx).CyclesRequired = arry(1)
                                End Select
vbwProfiler.vbwExecuteLine 1291 'B
'vbwLine 1292:                            Case Is = "UpLink", "DownLink"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1292), VBWPROFILER_EMPTY, _
        "UpLink"), "DownLink"
vbwProfiler.vbwExecuteLine 1293
                                MyLink.Type = arry(0)
vbwProfiler.vbwExecuteLine 1294
                                MyLink.Flag = arry1(0)
vbwProfiler.vbwExecuteLine 1295
                                If UBound(arry1) > 0 Then
vbwProfiler.vbwExecuteLine 1296
                                    MyLink.Raise = AtoBool(arry1(1))
vbwProfiler.vbwExecuteLine 1297
                                    MyLink.Temp = False
'Create the Links(Next Link Index)
vbwProfiler.vbwExecuteLine 1298
                                    Call CreateLink(Idx, MyLink)
                                Else
vbwProfiler.vbwExecuteLine 1299 'B
vbwProfiler.vbwExecuteLine 1300
MsgBox "Flag (" & Idx & "), " & arry(0) & " requires True or False"
                                End If
vbwProfiler.vbwExecuteLine 1301 'B
'vbwLine 1302:                            Case Is = "Controller"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1302), VBWPROFILER_EMPTY, _
        "Controller")
vbwProfiler.vbwExecuteLine 1303
                                SignalAttributes(Idx).Controller = arry(1)
'Flag attributes
'vbwLine 1304:                            Case Is = "Flag"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1304), VBWPROFILER_EMPTY, _
        "Flag")
'Put in Image in the Signal attributes
vbwProfiler.vbwExecuteLine 1305
                                If FileExists(SignalImageFilePath & arry1(0) & ".gif") Then
vbwProfiler.vbwExecuteLine 1306
                                    Set SignalAttributes(Idx).Image = LoadPicture(SignalImageFilePath & arry1(0) & ".gif")
                                Else
vbwProfiler.vbwExecuteLine 1307 'B
vbwProfiler.vbwExecuteLine 1308
MsgBox "Flag " & arry1(0) & " doesnt exist"
                                End If
vbwProfiler.vbwExecuteLine 1309 'B
'vbwLine 1310:                            Case Is = "Group"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1310), VBWPROFILER_EMPTY, _
        "Group")
vbwProfiler.vbwExecuteLine 1311
                                SignalAttributes(Idx).Group = arry(1)
vbwProfiler.vbwExecuteLine 1312
                                For i = 1 To UBound(GroupDefaults)
vbwProfiler.vbwExecuteLine 1313
                                    If GroupDefaults(i).Group = arry(1) Then
vbwProfiler.vbwExecuteLine 1314
                                        Exit For
                                    End If
vbwProfiler.vbwExecuteLine 1315 'B
vbwProfiler.vbwExecuteLine 1316
                                Next i
vbwProfiler.vbwExecuteLine 1317
                                If i <= UBound(GroupDefaults) Then
vbwProfiler.vbwExecuteLine 1318
                                    SignalAttributes(Idx).Flag.FixedCol = GroupDefaults(i).FixedCol
vbwProfiler.vbwExecuteLine 1319
                                    SignalAttributes(Idx).Flag.FixedRow = GroupDefaults(i).FixedRow
vbwProfiler.vbwExecuteLine 1320
                                    SignalAttributes(Idx).Flag.Queue = GroupDefaults(i).Queue
                                End If
vbwProfiler.vbwExecuteLine 1321 'B
'vbwLine 1322:                            Case Is = "Row"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1322), VBWPROFILER_EMPTY, _
        "Row")
vbwProfiler.vbwExecuteLine 1323
                                    SignalAttributes(Idx).Flag.FixedRow = arry(1)

'Raise on load Testing only, can only do when This Signal is closed, as we do not know the position
'vbwLine 1324:                            Case Is = "Raised"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1324), VBWPROFILER_EMPTY, _
        "Raised")
 'Initially display the flag for debugging the Position
vbwProfiler.vbwExecuteLine 1325
                                    If AtoBool(arry(1)) = True Then
vbwProfiler.vbwExecuteLine 1326
                                        Call frmMain.RaiseRequest(Idx)
                                    End If
vbwProfiler.vbwExecuteLine 1327 'B
'CommandAttributes
'vbwLine 1328:                            Case Is = "CommandVisible"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1328), VBWPROFILER_EMPTY, _
        "CommandVisible")
vbwProfiler.vbwExecuteLine 1329
                                frmMain.Commands(Idx).Visible = AtoBool(arry(1))
'CommandFrame not currently used
'vbwLine 1330:                            Case Is = "CommandFrame"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1330), VBWPROFILER_EMPTY, _
        "CommandFrame")
'                                    Set MyFrame = NametoFrame(arry(1))  'an Object
vbwProfiler.vbwExecuteLine 1331
                                    Select Case arry(1)
'vbwLine 1332:                                        Case Is = "Postponement", "Horn"
                                        Case Is = IIf(vbwProfiler.vbwExecuteLine(1332), VBWPROFILER_EMPTY, _
        "Postponement"), "Horn"
vbwProfiler.vbwExecuteLine 1333
                                        Set frmMain.Commands(Idx).Container = MyFrame
'                                    Set frmMain.Commands(Idx).Container = frmMain.fraPostponement
'                                    Set frmMain.Commands(Idx).Container = frmMain.fraHorn
vbwProfiler.vbwExecuteLine 1334
                                        frmMain.Commands(Idx).Top = 0
vbwProfiler.vbwExecuteLine 1335
                                        frmMain.Commands(Idx).Left = 0
vbwProfiler.vbwExecuteLine 1336
                                        frmMain.Commands(Idx).Width = 1700
'Position in middle of frame at the bottom
vbwProfiler.vbwExecuteLine 1337
                                        frmMain.Commands(Idx).Move _
                                        (MyFrame.Width _
                                        - frmMain.Commands(Idx).Width) / 2 _
                                        , MyFrame.Height _
                                       - frmMain.Commands(Idx).Height - 100
vbwProfiler.vbwExecuteLine 1338
                                       MyFont.Name = "Verdana"
vbwProfiler.vbwExecuteLine 1339
                                        MyFont.Size = 14
vbwProfiler.vbwExecuteLine 1340
                                        MyFont.Bold = True
vbwProfiler.vbwExecuteLine 1341
                                        Set frmMain.Commands(Idx).Font = MyFont
                                Case Else
vbwProfiler.vbwExecuteLine 1342 'B
vbwProfiler.vbwExecuteLine 1343
MsgBox "Command Frame " & arry(1) & " Container doesnt exist"

                                End Select
vbwProfiler.vbwExecuteLine 1344 'B
'frmMain.Commands(Idx).Visible = True
'Stop
                            Case Else
vbwProfiler.vbwExecuteLine 1345 'B
vbwProfiler.vbwExecuteLine 1346
MsgBox "Invalid " & arry(0) & " in Profile Section " & Section
                            End Select
vbwProfiler.vbwExecuteLine 1347 'B
                        Else
vbwProfiler.vbwExecuteLine 1348 'B
vbwProfiler.vbwExecuteLine 1349
MsgBox "No index " & arry(0) & " in Profile Section " & Section
                        End If  'Got a flag for this index
vbwProfiler.vbwExecuteLine 1350 'B
'vbwLine 1351:                    Case Is = "Event"
                    Case Is = IIf(vbwProfiler.vbwExecuteLine(1351), VBWPROFILER_EMPTY, _
        "Event")
vbwProfiler.vbwExecuteLine 1352
                        If IniNewEvent Is Nothing Then
vbwProfiler.vbwExecuteLine 1353
                            Set IniNewEvent = New clsEvent
'NOTE IDX will be 0, because Signal not yet defined
'Enables is only used to enable command buttons
'                            IniNewEvent.Enabled = True  'Enable by default
                        End If
vbwProfiler.vbwExecuteLine 1354 'B


vbwProfiler.vbwExecuteLine 1355
                        With IniNewEvent
vbwProfiler.vbwExecuteLine 1356
                            Select Case arry(0)
'vbwLine 1357:                            Case Is = "Time"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1357), VBWPROFILER_EMPTY, _
        "Time")
vbwProfiler.vbwExecuteLine 1358
                                .Second = arry(1) / Multiplier

'vbwLine 1359:                            Case Is = "Signal"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1359), VBWPROFILER_EMPTY, _
        "Signal")
vbwProfiler.vbwExecuteLine 1360
                                If Not IsSignalsInitialised(Evts(Eidx).Signals) Then
vbwProfiler.vbwExecuteLine 1361
                                    ReDim Evts(Eidx).Signals(0)
vbwProfiler.vbwExecuteLine 1362
                                    Sidx = 0
                                Else
vbwProfiler.vbwExecuteLine 1363 'B
vbwProfiler.vbwExecuteLine 1364
                                    Sidx = Sidx + 1
vbwProfiler.vbwExecuteLine 1365
                                    ReDim Preserve Evts(Eidx).Signals(Sidx)
                                End If
vbwProfiler.vbwExecuteLine 1366 'B

vbwProfiler.vbwExecuteLine 1367
                                i = SignalFromName(arry(1))
vbwProfiler.vbwExecuteLine 1368
                                If i > 0 Then
vbwProfiler.vbwExecuteLine 1369
                                    .Signal = i
'Set Command Enabled to the initial state of the command button
'                                    IniNewEvent.CommandEnabled = frmMain.Commands(i).Enabled
vbwProfiler.vbwExecuteLine 1370
                                    Evts(Eidx).Signals(Sidx).Signal = i
                                Else
vbwProfiler.vbwExecuteLine 1371 'B
vbwProfiler.vbwExecuteLine 1372
MsgBox "Invalid Signal Name " & arry(1) & " in Profile Section " & Section
                                End If
vbwProfiler.vbwExecuteLine 1373 'B

'vbwLine 1374:                            Case Is = "Button"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1374), VBWPROFILER_EMPTY, _
        "Button")
vbwProfiler.vbwExecuteLine 1375
                                If Not IsButtonsInitialised(Evts(Eidx).Buttons) Then
vbwProfiler.vbwExecuteLine 1376
                                    ReDim Evts(Eidx).Buttons(0)
vbwProfiler.vbwExecuteLine 1377
                                    Bidx = 0
                                Else
vbwProfiler.vbwExecuteLine 1378 'B
vbwProfiler.vbwExecuteLine 1379
                                    Bidx = Bidx + 1
vbwProfiler.vbwExecuteLine 1380
                                    ReDim Preserve Evts(Eidx).Buttons(Bidx)
                                End If
vbwProfiler.vbwExecuteLine 1381 'B

vbwProfiler.vbwExecuteLine 1382
                                i = SignalFromName(arry1(0))
vbwProfiler.vbwExecuteLine 1383
                                If i > 0 Then
'Set Command Enabled to the initial state of the command button
'                                    IniNewEvent.CommandEnabled = frmMain.Commands(i).Enabled
vbwProfiler.vbwExecuteLine 1384
                                    Evts(Eidx).Buttons(Bidx).Button = i
vbwProfiler.vbwExecuteLine 1385
                                    Evts(Eidx).Buttons(Bidx).Enabled = arry1(1)
                                Else
vbwProfiler.vbwExecuteLine 1386 'B
vbwProfiler.vbwExecuteLine 1387
MsgBox "Invalid Button Name " & arry(1) & " in Profile Section " & Section
                                End If
vbwProfiler.vbwExecuteLine 1388 'B
'vbwLine 1389:                            Case Is = "Focus"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1389), VBWPROFILER_EMPTY, _
        "Focus")
vbwProfiler.vbwExecuteLine 1390
                                Evts(Eidx).Focus = SignalFromName(arry1(0))
'vbwLine 1391:                            Case Is = "Raised"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1391), VBWPROFILER_EMPTY, _
        "Raised")
vbwProfiler.vbwExecuteLine 1392
                                .Raised = AtoBool(arry(1))
vbwProfiler.vbwExecuteLine 1393
                                Evts(Eidx).Signals(Sidx).Raise = arry(1)
'vbwLine 1394:                            Case Is = "Silent"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1394), VBWPROFILER_EMPTY, _
        "Silent")
vbwProfiler.vbwExecuteLine 1395
                                .Silent = AtoBool(arry(1))
'                            Case Is = "CommandEnabled"     'Set to true by default
'                                .CommandEnabled = AtoBool(arry(1))
vbwProfiler.vbwExecuteLine 1396
                                Evts(Eidx).Signals(Sidx).Silent = arry(1)
'vbwLine 1397:                            Case Is = "Message"
                            Case Is = IIf(vbwProfiler.vbwExecuteLine(1397), VBWPROFILER_EMPTY, _
        "Message")
vbwProfiler.vbwExecuteLine 1398
                                If .Message <> "" Then
vbwProfiler.vbwExecuteLine 1399
                                     .Message = .Message & ", "
                                End If
vbwProfiler.vbwExecuteLine 1400 'B
vbwProfiler.vbwExecuteLine 1401
                                .Message = .Message & arry(1)
vbwProfiler.vbwExecuteLine 1402
                                Evts(Eidx).Signals(Sidx).Message = Evts(Eidx).Signals(Sidx).Message & arry(1)
                            Case Else
vbwProfiler.vbwExecuteLine 1403 'B
vbwProfiler.vbwExecuteLine 1404
MsgBox "Invalid " & arry(0) & " in Profile Section " & Section
                            End Select
vbwProfiler.vbwExecuteLine 1405 'B
vbwProfiler.vbwExecuteLine 1406
                        End With
                    Case Else
vbwProfiler.vbwExecuteLine 1407 'B
vbwProfiler.vbwExecuteLine 1408
MsgBox "Invalid Section in Initialisation File"
                    End Select
vbwProfiler.vbwExecuteLine 1409 'B
                Else
vbwProfiler.vbwExecuteLine 1410 'B
vbwProfiler.vbwExecuteLine 1411
                    MsgBox "Line Outside section" & vbCrLf & nextline & vbCrLf, vbExclamation, "LoadProfile"
                End If
vbwProfiler.vbwExecuteLine 1412 'B
            End If
vbwProfiler.vbwExecuteLine 1413 'B
        End If
vbwProfiler.vbwExecuteLine 1414 'B
Skip_Line:
vbwProfiler.vbwExecuteLine 1415
    Loop
vbwProfiler.vbwExecuteLine 1416
    Close #Ch

'Check Command Button Signals have been defined
vbwProfiler.vbwExecuteLine 1417
    Call CommandIdx("Postpone")
vbwProfiler.vbwExecuteLine 1418
    Call CommandIdx("Horn Short")
vbwProfiler.vbwExecuteLine 1419
    Call CommandIdx("Recall")
vbwProfiler.vbwExecuteLine 1420
    Call CommandIdx("General Recall")
vbwProfiler.vbwExecuteLine 1421
    Call CommandIdx("Finish")

'    For i = 0 To UBound(frmMain.CmdQ)
'        If frmMain.CmdQ(i) = 0 And Commands(frmMain.CmdQ(i)).BackColor = vbCyan Then
'Stop
'        End If
'    Next i

'Clear the Splash display (after 3 secs)
vbwProfiler.vbwExecuteLine 1422
    frmMain.ClearFlagsTimer.Enabled = True

vbwProfiler.vbwExecuteLine 1423
    frmMain.cmdEvents.Enabled = True
vbwProfiler.vbwExecuteLine 1424
    Loading = False
vbwProfiler.vbwExecuteLine 1425
    frmMain.RaceTimer.Enabled = True
'temp stop    frmMain.RaceTimer.Enabled = True


vbwProfiler.vbwProcOut 66
vbwProfiler.vbwExecuteLine 1426
End Function

Private Function FlagRaised(Idx As Long) As Boolean
vbwProfiler.vbwProcIn 67
Dim MyImage As Image
vbwProfiler.vbwExecuteLine 1427
    For Each MyImage In frmMain.Flags
vbwProfiler.vbwExecuteLine 1428
        If MyImage.Index = Idx Then
vbwProfiler.vbwExecuteLine 1429
            FlagRaised = True
vbwProfiler.vbwProcOut 67
vbwProfiler.vbwExecuteLine 1430
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 1431 'B
vbwProfiler.vbwExecuteLine 1432
    Next MyImage
vbwProfiler.vbwProcOut 67
vbwProfiler.vbwExecuteLine 1433
End Function

Private Function CommandExists(Idx As Long) As Boolean
vbwProfiler.vbwProcIn 68
Dim MyCommand As CommandButton
vbwProfiler.vbwExecuteLine 1434
    For Each MyCommand In frmMain.Commands
vbwProfiler.vbwExecuteLine 1435
        If MyCommand.Index = Idx Then
vbwProfiler.vbwExecuteLine 1436
            CommandExists = True
vbwProfiler.vbwProcOut 68
vbwProfiler.vbwExecuteLine 1437
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 1438 'B
vbwProfiler.vbwExecuteLine 1439
    Next MyCommand
vbwProfiler.vbwProcOut 68
vbwProfiler.vbwExecuteLine 1440
End Function

Public Function AtoBool(kb As String) As Boolean
vbwProfiler.vbwProcIn 69
vbwProfiler.vbwExecuteLine 1441
    If kb = "True" Then
vbwProfiler.vbwExecuteLine 1442
         AtoBool = True
    End If
vbwProfiler.vbwExecuteLine 1443 'B
vbwProfiler.vbwProcOut 69
vbwProfiler.vbwExecuteLine 1444
End Function

Public Function SignalIdx(SignalType As String, Optional SignalName As String) As Long
vbwProfiler.vbwProcIn 70
Dim i As Long
Dim kb As String

vbwProfiler.vbwExecuteLine 1445
    For i = 1 To UBound(SignalAttributes)
vbwProfiler.vbwExecuteLine 1446
        If SignalAttributes(i).Type = SignalType Then
vbwProfiler.vbwExecuteLine 1447
            If SignalName <> "" Then
vbwProfiler.vbwExecuteLine 1448
                If SignalAttributes(i).Name = SignalName Then
vbwProfiler.vbwExecuteLine 1449
                    SignalIdx = i
vbwProfiler.vbwProcOut 70
vbwProfiler.vbwExecuteLine 1450
                    Exit Function
                End If
vbwProfiler.vbwExecuteLine 1451 'B
            Else
vbwProfiler.vbwExecuteLine 1452 'B
vbwProfiler.vbwExecuteLine 1453
                SignalIdx = i
vbwProfiler.vbwProcOut 70
vbwProfiler.vbwExecuteLine 1454
                Exit Function
            End If
vbwProfiler.vbwExecuteLine 1455 'B
        End If
vbwProfiler.vbwExecuteLine 1456 'B
vbwProfiler.vbwExecuteLine 1457
    Next i
vbwProfiler.vbwExecuteLine 1458
    kb = "Signal Type " & SignalType
vbwProfiler.vbwExecuteLine 1459
    If SignalName <> "" Then
vbwProfiler.vbwExecuteLine 1460
        kb = kb & ", Signal Name " & SignalName
    End If
vbwProfiler.vbwExecuteLine 1461 'B
vbwProfiler.vbwExecuteLine 1462
    kb = kb & " not found"
vbwProfiler.vbwExecuteLine 1463
MsgBox kb, vbExclamation, "SignalIdx"
vbwProfiler.vbwProcOut 70
vbwProfiler.vbwExecuteLine 1464
End Function

Public Function CommandIdx(CommandName As String) As Long
vbwProfiler.vbwProcIn 71
Dim kb As String
Dim MyCommand As CommandButton

vbwProfiler.vbwExecuteLine 1465
    For Each MyCommand In frmMain.Commands
vbwProfiler.vbwExecuteLine 1466
        If MyCommand.Caption = CommandName Then
vbwProfiler.vbwExecuteLine 1467
            CommandIdx = MyCommand.Index
vbwProfiler.vbwProcOut 71
vbwProfiler.vbwExecuteLine 1468
            Exit Function
        End If
vbwProfiler.vbwExecuteLine 1469 'B
vbwProfiler.vbwExecuteLine 1470
    Next MyCommand
vbwProfiler.vbwExecuteLine 1471
MsgBox "Command Button " & CommandName & " not found", vbExclamation, "CommandIdx"
vbwProfiler.vbwProcOut 71
vbwProfiler.vbwExecuteLine 1472
End Function

'Check to see if Timer(index) exists, there seems to be no other way to check
'other than trying to access the index
Public Function TimerExists(Idx As Long) As Boolean
vbwProfiler.vbwProcIn 72
vbwProfiler.vbwExecuteLine 1473
    On Error GoTo NoTimer
vbwProfiler.vbwExecuteLine 1474
    If frmMain.SignalTimer(Idx).Index Then
vbwProfiler.vbwExecuteLine 1475
        TimerExists = True
    End If
vbwProfiler.vbwExecuteLine 1476 'B
NoTimer:
vbwProfiler.vbwProcOut 72
vbwProfiler.vbwExecuteLine 1477
End Function

Private Function UnloadSignalTimers()
vbwProfiler.vbwProcIn 73
Dim oSignalTimer As Timer
Dim Idx As Integer
vbwProfiler.vbwExecuteLine 1478
    For Each oSignalTimer In frmMain.SignalTimer
vbwProfiler.vbwExecuteLine 1479
        Idx = oSignalTimer.Index
'        Set oSignalTimer = Nothing
vbwProfiler.vbwExecuteLine 1480
        If Idx > 0 Then
'            Unload frmMain.SignalTimer(Idx)
vbwProfiler.vbwExecuteLine 1481
            Unload oSignalTimer
        End If
vbwProfiler.vbwExecuteLine 1482 'B
vbwProfiler.vbwExecuteLine 1483
    Next
vbwProfiler.vbwProcOut 73
vbwProfiler.vbwExecuteLine 1484
End Function

Public Function HasIndex(ControlArray As Object, ByVal Index As Integer) As Boolean
vbwProfiler.vbwProcIn 74
vbwProfiler.vbwExecuteLine 1485
    HasIndex = (VarType(ControlArray(Index)) <> vbObject)
vbwProfiler.vbwProcOut 74
vbwProfiler.vbwExecuteLine 1486
End Function

Public Function NameFromFullPath(FullPath As String, Optional Delimiter As String, Optional RemoveRollover As Boolean) As String
'Input: Name/Full Path of a file
'Returns: Name of file
vbwProfiler.vbwProcIn 75

    Dim sPath As String
    Dim sList() As String
    Dim sAns As String
    Dim iArrayLen As Integer
    Dim i As Integer
    Dim j As Integer
    Dim kb As String

'MsgBox FullPath
vbwProfiler.vbwExecuteLine 1487
    If Delimiter = "" Then
vbwProfiler.vbwExecuteLine 1488
         Delimiter = "\"
    End If
vbwProfiler.vbwExecuteLine 1489 'B
vbwProfiler.vbwExecuteLine 1490
    If Len(FullPath) = 0 Then
vbwProfiler.vbwProcOut 75
vbwProfiler.vbwExecuteLine 1491
         Exit Function
    End If
vbwProfiler.vbwExecuteLine 1492 'B
vbwProfiler.vbwExecuteLine 1493
    sList = Split(FullPath, Delimiter)
vbwProfiler.vbwExecuteLine 1494
    iArrayLen = UBound(sList)
vbwProfiler.vbwExecuteLine 1495
    sAns = IIf(iArrayLen = 0, "", sList(iArrayLen))
'only filename
'MsgBox FullPath
vbwProfiler.vbwExecuteLine 1496
    If sAns = "" And iArrayLen = 0 Then
vbwProfiler.vbwExecuteLine 1497
         sAns = FullPath
    End If
vbwProfiler.vbwExecuteLine 1498 'B
vbwProfiler.vbwExecuteLine 1499
    If RemoveRollover And sAns <> "" Then
vbwProfiler.vbwExecuteLine 1500
        j = InStr(sAns, ".") 'get the first dot
vbwProfiler.vbwExecuteLine 1501
        If j = 0 Then 'no dot so all the string
vbwProfiler.vbwExecuteLine 1502
             j = Len(sAns)
        End If
vbwProfiler.vbwExecuteLine 1503 'B
vbwProfiler.vbwExecuteLine 1504
        i = InStrRev(Left$(sAns, j), "_")
vbwProfiler.vbwExecuteLine 1505
        If j = i + 9 Then 'msu be _yyyymmdd.
vbwProfiler.vbwExecuteLine 1506
            If IsNumeric(Mid$(sAns, i + 1, 8)) Then
vbwProfiler.vbwExecuteLine 1507
                sAns = Replace(sAns, Mid$(sAns, i, 9), "")
            End If
vbwProfiler.vbwExecuteLine 1508 'B
        End If
vbwProfiler.vbwExecuteLine 1509 'B
    End If
vbwProfiler.vbwExecuteLine 1510 'B

vbwProfiler.vbwExecuteLine 1511
    NameFromFullPath = sAns

vbwProfiler.vbwProcOut 75
vbwProfiler.vbwExecuteLine 1512
End Function


' Return True if a file exists
Public Function FileExists(FileName As String) As Boolean
vbwProfiler.vbwProcIn 76
vbwProfiler.vbwExecuteLine 1513
    FileExists = False
'MsgBox FileName & ":" & GetAttr(FileName)
vbwProfiler.vbwExecuteLine 1514
    On Error GoTo ErrorHandler
vbwProfiler.vbwExecuteLine 1515
    If NameFromFullPath(FileName) <> "" Then  'directory
'does file exists
vbwProfiler.vbwExecuteLine 1516
        If (GetAttr(FileName) And vbNormal) = vbNormal Then
vbwProfiler.vbwExecuteLine 1517
             FileExists = True
        End If
vbwProfiler.vbwExecuteLine 1518 'B
    End If
vbwProfiler.vbwExecuteLine 1519 'B
'MsgBox Filename & vbCrLf & FileExists
ErrorHandler:
    ' if an error occurs, this function returns False
vbwProfiler.vbwProcOut 76
vbwProfiler.vbwExecuteLine 1520
End Function

Public Function CreateLink(ByRef Idx As Long, Link As defLink)
vbwProfiler.vbwProcIn 77
vbwProfiler.vbwExecuteLine 1521
    With SignalAttributes(Idx)
vbwProfiler.vbwExecuteLine 1522
        If IsLinksInitialised(.Links) = False Then
vbwProfiler.vbwExecuteLine 1523
            ReDim .Links(0)
        Else
vbwProfiler.vbwExecuteLine 1524 'B
vbwProfiler.vbwExecuteLine 1525
            ReDim Preserve .Links(UBound(.Links) + 1)
        End If
vbwProfiler.vbwExecuteLine 1526 'B
vbwProfiler.vbwExecuteLine 1527
        .Links(UBound(.Links)) = Link
vbwProfiler.vbwExecuteLine 1528
    End With
vbwProfiler.vbwProcOut 77
vbwProfiler.vbwExecuteLine 1529
End Function

Public Function IsLinksInitialised(ByRef arr() As defLink) As Boolean
vbwProfiler.vbwProcIn 78
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1530
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1531
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1532
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1533
         IsLinksInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1534 'B
vbwProfiler.vbwProcOut 78
vbwProfiler.vbwExecuteLine 1535
Exit Function
errHandler:
vbwProfiler.vbwProcOut 78
vbwProfiler.vbwExecuteLine 1536
End Function

Public Function IsEvtsInitialised(ByRef arr() As defEvt) As Boolean
vbwProfiler.vbwProcIn 79
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1537
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1538
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1539
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1540
         IsEvtsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1541 'B
vbwProfiler.vbwProcOut 79
vbwProfiler.vbwExecuteLine 1542
Exit Function
errHandler:
vbwProfiler.vbwProcOut 79
vbwProfiler.vbwExecuteLine 1543
End Function

Public Function IsSignalsInitialised(ByRef arr() As defSignalEvt) As Boolean
vbwProfiler.vbwProcIn 80
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1544
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1545
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1546
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1547
         IsSignalsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1548 'B
vbwProfiler.vbwProcOut 80
vbwProfiler.vbwExecuteLine 1549
Exit Function
errHandler:
vbwProfiler.vbwProcOut 80
vbwProfiler.vbwExecuteLine 1550
End Function

Public Function IsButtonsInitialised(ByRef arr() As defButtonEvt) As Boolean
vbwProfiler.vbwProcIn 81
Dim Temp As Long
vbwProfiler.vbwExecuteLine 1551
    On Error GoTo errHandler 'Raise error if directory doesnot exist
vbwProfiler.vbwExecuteLine 1552
    Temp = UBound(arr)
vbwProfiler.vbwExecuteLine 1553
    If Temp > -1 Then 'UBound is greater then -1
vbwProfiler.vbwExecuteLine 1554
         IsButtonsInitialised = True
    End If
vbwProfiler.vbwExecuteLine 1555 'B
vbwProfiler.vbwProcOut 81
vbwProfiler.vbwExecuteLine 1556
Exit Function
errHandler:
vbwProfiler.vbwProcOut 81
vbwProfiler.vbwExecuteLine 1557
End Function

'Returns the index from the Signal name,
'Only used by LoadProfile so that the .ini file can refer to it by name which makes
'Setting up the initialisation file easier.
'Return 0 if not found
Public Function SignalFromName(ByVal Name As String) As Long
vbwProfiler.vbwProcIn 82
Dim Idx As Long

vbwProfiler.vbwExecuteLine 1558
    For Idx = 1 To UBound(SignalAttributes)
vbwProfiler.vbwExecuteLine 1559
        With SignalAttributes(Idx)
vbwProfiler.vbwExecuteLine 1560
            If .Name = Name Then
vbwProfiler.vbwExecuteLine 1561
                SignalFromName = Idx
vbwProfiler.vbwExecuteLine 1562
                Exit For
            End If
vbwProfiler.vbwExecuteLine 1563 'B
vbwProfiler.vbwExecuteLine 1564
        End With
vbwProfiler.vbwExecuteLine 1565
    Next Idx
vbwProfiler.vbwProcOut 82
vbwProfiler.vbwExecuteLine 1566
End Function

'Return Eidx of first event at this time 0= none, -1 =array not initialised
Public Function IsEventDue(ElapsedTime) As Long
vbwProfiler.vbwProcIn 83
Dim Eidx As Long

vbwProfiler.vbwExecuteLine 1567
    If IsEvtsInitialised(Evts) Then
vbwProfiler.vbwExecuteLine 1568
        For Eidx = 1 To UBound(Evts)
vbwProfiler.vbwExecuteLine 1569
            If Evts(Eidx).ElapsedTime = ElapsedTime Then
vbwProfiler.vbwExecuteLine 1570
                IsEventDue = Eidx
vbwProfiler.vbwProcOut 83
vbwProfiler.vbwExecuteLine 1571
                Exit Function
            End If
vbwProfiler.vbwExecuteLine 1572 'B
vbwProfiler.vbwExecuteLine 1573
        Next Eidx
    Else
vbwProfiler.vbwExecuteLine 1574 'B
vbwProfiler.vbwExecuteLine 1575
        IsEventDue = -1
    End If
vbwProfiler.vbwExecuteLine 1576 'B
vbwProfiler.vbwProcOut 83
vbwProfiler.vbwExecuteLine 1577
End Function


